{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to AWS Knowledge Base! AWS Learning Club - UP Mindanao <p>Amazon Web Services Learning Club - University of the Philippines Mindanao is the first official AWS student organization in Mindanao. Founded in early 2024, this club fosters AWS knowledge growth through workshops, knowledge sharing, and community building.</p> Coming Soon Coming Soon Coming Soon Coming Soon"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/","title":"Backbone of AWS","text":"Amazon Cloud Compute Workshop: Backbone of AWS"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Table of Contents</li> <li>Workshop Overview</li> <li>Prerequisites</li> <li>Workshop Elements</li> <li>History of AWS</li> <li>AWS Architecture</li> <li>EC2 and its Pricing</li> <li>Creating an Instance</li> <li>Creating an Instance using AWS CLI</li> <li>Instance Connect</li> <li>Security Groups</li> <li>S3 and IAM with EC2</li> <li>EC2 Amazon Machine Image</li> <li>Elastic IP</li> <li>Elastic Block Storage</li> <li>Creating a load balancer</li> <li>Auto Scaling Group</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#workshop-overview","title":"Workshop Overview","text":"<p>In this workshop, you'll gain a deep understanding of AWS Elastic Compute Cloud (EC2), with a focus on launching and managing EC2 instances. Through hands-on activities, you'll learn to configure and secure your EC2 environments, manage instance types, and optimize performance for your applications.</p> <p>By the end of the session, you will have the skills to effectively deploy, manage, and scale EC2 instances, ensuring high availability, security, and cost-efficiency in your AWS infrastructure.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following tools installed before starting:</p> <ul> <li>Windows Subsystem for Linux (WSL): Install WSL</li> <li>AWS CLI v2: Install AWS CLI v2</li> <li>AWS IAM User with Admin Access: Create an IAM User</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#workshop-elements","title":"Workshop Elements","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#history-of-aws","title":"History of AWS","text":"<p>This section covers the Emergence of Cloud-Based Services.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#aws-architecture","title":"AWS Architecture","text":"<p>Explore and know how the AWS provides a vast and scalable cloud platform that enables companies to deliver services globally. Key points include:</p> <ul> <li>AWS Global Infrastruture: This tackles regions and availability Zones along with its purpose, usage and exaples.</li> <li>Core AWS Services: Compute services as the backbone for processing power on AWS, Storage, Networking, Databses, Content Delivery, Security, Elasticity &amp; sclaing, and Serverless architecture and their importance to AWS Architecture.</li> <li>Key Benefits of AWS Global Architecture</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#ec2-and-its-pricing","title":"EC2 and its Pricing","text":"<p>Understand the Amazon Elastic Compute Cloud (Amazon EC2) along with it features. This will cover also the different pricing for related services.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#creating-an-instance","title":"Creating an Instance","text":"<p>Learn the steps in launching your first EC2 instance. The following will serve as the primer to your journey:</p> <ul> <li>Guide to Launching Your First EC2 Instance: Detailed instructions on setting up new AWS accounts.  </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#creating-an-instance-using-aws-cli","title":"Creating an Instance using AWS CLI","text":"<ul> <li>Making an EC2 Instance using AWS CLI, the way to interact with AWS services programmatically, this guide also gives you the guide to Create Access Keys in the Management Console .</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#instance-connect","title":"Instance Connect","text":"<p>This will give you an understanding regarding the access to a server in the cloud, allowing administrators and developers to manage, configure, and maintain the infrastructure remotely. This module includes:</p> <ul> <li>What is key pair?: Vital to secure access to your Amazon EC2 instance.</li> <li>How the Key Pairs Work in SSH: Demonstration of user and host key pairs.</li> <li>SSH Handshake and its benefits</li> <li>Connecting to your instance: steps to connect after launching EC2 instance.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#security-groups","title":"Security Groups","text":"<p>Know the role of security groups in EC2 instances and the best practices for using one along with Understanding IP addresses.</p> <ul> <li>Apache Web Server Setup on EC2 instace</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#s3-and-iam-with-ec2","title":"S3 and IAM with EC2","text":"<p>Understanding what is Amazon S3 and IAM role and its relation EC2 isntance.</p> <ul> <li>Guide to Adding files to EC2 instance</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#ec2-amazon-machine-image","title":"EC2 Amazon Machine Image","text":"<p>Discover Amazon Machine Image as a requirement to set up and boot an Amazon EC2 instance.</p> <ul> <li>Creating a Pre-built AMI from an Instance: Steps to create a pre-built AMI with the image captured from our instance.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#elastic-ip","title":"Elastic IP","text":"<p>Introduction to Elastic IP with its Key Features and Benefits, security access, cost and tagging, and regional availability.</p> <ul> <li>Setting Up an Elastic IP</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#elastic-block-storage","title":"Elastic Block Storage","text":"<p>Explore the range of EC2 storage available particularly understanding what is EBS and EFS. The following includes in this section:</p> <ul> <li>Storage in EC2: Storage options can be used independently or in combination.</li> <li>EBS volumes: It's the storage volumes that you attach to Amazon EC2 instances.</li> <li>EBS snapshots: The backups of Amazon EBS volumes.</li> <li>EBS volume types:</li> <li>Features and benefits of Amazon EBS volumes</li> <li>Elastic File System (EFS): 'for limux instance'</li> <li>EBS Lifecycle Manager: This is for the automation of the creation, retention, and deletion of EBS snapshots and EBS-backed AMIs.</li> <li>Expanding an EBS Volume: Steps to expand the EBS volume and the file system on the EC2 instance.</li> <li>Configuring an Elastic Load Balancer with Multiple Instances: This is the guide in setting up an (ELB) with three EC2 instances that provide slightly different outputs.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#creating-a-load-balancer","title":"Creating a load balancer","text":"<ul> <li>This part will walk you through the process of setting up an Elastic Load Balancer (ELB) with three EC2 instances that provide slightly different outputs. This setup will help demonstrate how load balancing works by distributing traffic across the instances.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/#auto-scaling-group","title":"Auto Scaling Group","text":"<p>This will help in ensuring the correct number of Amazon EC2 instances available to handle the load for an application. Key points include:</p> <ul> <li>Creating a launch template: Best practices for attaching and managing policies.</li> <li>Create ASG using launch configurations: Best practices for attaching and managing policies.</li> <li>Scaling Methods: Several ways to scale Auto Scaling group.</li> <li>Challenges of using EC2 Auto Scaling'</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/00%20-%20History%20of%20AWS/","title":"Why AWS?: History of AWS's Emergence","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/00%20-%20History%20of%20AWS/#history-the-beginning-of-aws","title":"History: The Beginning of AWS","text":"<p>AWS emerged in the early 2000s from Amazon\u2019s internal need to optimize and scale its infrastructure. At the time, Amazon realized that its e-commerce business required a significant amount of computing power, but these resources were often underutilized during non-peak periods. This led Amazon to explore ways to capitalize on excess computing capacity. The realization of their internal challenges and inefficiencies\u2014managing infrastructure that could scale up for peak seasons and then remain idle during downtime\u2014prompted the company to think of a broader solution. By the mid-2000s, the company recognized a gap in the market where other organizations were facing similar issues, and AWS was born to help businesses avoid the capital expense and complexity of managing their own IT infrastructure.  </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/00%20-%20History%20of%20AWS/#the-emergence-of-cloud-based-services","title":"The Emergence of Cloud-Based Services","text":"<p>AWS represents a paradigm shift in how companies manage IT services. Rather than investing in physical servers or data centers, businesses could now rent computing resources on demand. AWS introduced this idea of a cloud-based service model that allowed companies to quickly scale up or down based on demand. This flexibility dramatically lowered the costs associated with IT infrastructure while allowing businesses to focus more on innovation rather than maintenance. The initial offerings, such as Simple Storage Service (S3) and Elastic Compute Cloud (EC2), gave businesses scalable storage and computing power with the added benefits of reliability, speed, and security.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/00%20-%20History%20of%20AWS/#from-renting-servers-to-offering-a-comprehensive-ecosystem","title":"From Renting Servers to Offering a Comprehensive Ecosystem","text":"<p>AWS started primarily as a service to rent out excess server capacity through EC2. However, this was only the beginning of a more extensive ecosystem. Over time, AWS expanded from basic server renting to offering a wide array of services, including managed databases, machine learning, content delivery, networking, security, and developer tools. These services are now used by businesses globally to handle everything from basic web hosting to complex data analytics and artificial intelligence applications. AWS's success lies in its ability to offer more than 200 fully-featured services that cater to industries such as healthcare, finance, manufacturing, and entertainment.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/00%20-%20History%20of%20AWS/#key-milestones-in-aws-history","title":"Key Milestones in AWS History","text":"<p>2000-2003: The Idea   In the early 2000s, Amazon faced internal challenges managing their own infrastructure. This led to the concept of offering excess computing capacity to other companies.</p> <p>2002: Early Web Services   Amazon launched its first web services, such as the Amazon e-commerce service, but the full cloud concept wasn\u2019t implemented yet.</p> <p>2004: AWS Development   A small team led by Andy Jassy began working on the foundations of AWS. They aimed to create a platform that could help developers build applications more efficiently.</p> <p>2006: Official Launch of AWS   AWS officially launched in 2006 with its first services, Simple Storage Service (S3) and Elastic Compute Cloud (EC2). These services allowed businesses to rent storage and computing power on demand.</p> <p>2007-2011: Growth and New Services   AWS rapidly grew and expanded its services, including the introduction of Relational Database Service (RDS) in 2009, CloudFront for content delivery in 2008, and Elastic Block Store (EBS) in 2008.</p> <p>2012-2015: Global Expansion   AWS expanded its global infrastructure with new data centers worldwide, establishing a robust presence in regions like Europe, Asia, and South America. During this period, it launched over 100 new services, including DynamoDB (2012) and Redshift (2013).</p> <p>2016: $10 Billion Milestone    AWS hit $10 billion in annual revenue in 2016. This highlights its dominance in the cloud industry. New services like Lambda (serverless computing) also emerged during this time.</p> <p>2020-Present: Continuing Innovation   AWS continues to dominate the cloud industry with innovations in AI, machine learning, and edge computing. It now offers more than 200 services across various sectors.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/","title":"Understanding AWS\u2019s Architecture","text":"<p>Amazon Web Services (AWS) provides a vast and scalable cloud platform that enables companies to deliver services globally. To ensure high availability, fault tolerance, and low-latency access, AWS has built a robust global infrastructure. Below is the breakdown of its architecture.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#regions","title":"Regions","text":"<p>A Region is a geographically distinct area where AWS operates data centers. AWS offers multiple Regions around the world, and each Region is isolated from others to ensure data sovereignty and compliance. For example, AWS has Regions in North America, Europe, Asia-Pacific, and other continents.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#purpose","title":"Purpose","text":"<p>Regions provide proximity to customers, help with legal and compliance requirements (such as GDPR in the EU), and offer disaster recovery by distributing resources across geographic locations.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#common-regions","title":"Common Regions","text":"<ul> <li>US East (N. Virginia)</li> <li>Asia Pacific (Singapore)</li> <li>Europe (Frankfurt)</li> </ul> <p>When deploying services on AWS, users choose which Region to deploy their resources in based on factors like latency, cost, and compliance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#availability-zones-azs","title":"Availability Zones (AZs)","text":"<p>Each Region consists of multiple Availability Zones (AZs). An Availability Zone is essentially a cluster of one or more data centers equipped with independent power, cooling, and networking.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#purpose_1","title":"Purpose","text":"<p>Availability Zones are designed to be physically separated from each other to ensure fault tolerance. If one AZ experiences an outage, others in the same Region can take over, ensuring minimal disruption to services. For instance, deploying a web application across three AZs in the same Region allows it to remain operational even if one AZ fails.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#usage","title":"Usage","text":"<p>When building highly available applications, it's recommended to distribute workloads across multiple AZs to avoid a single point of failure.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#examples","title":"Examples","text":"<ul> <li>ap-southeast-1b (Singapore): This is one of the AZs within the AWS Region ap-southeast-1 (Asia Pacific, Singapore). The \"b\" indicates it is one of multiple zones within this region.</li> <li>us-east-1a (Northern Virginia): us-east-1 is the AWS Region for Northern Virginia, a major hub for AWS services.</li> <li>eu-west-1c (Ireland): The AWS Region eu-west-1 is based in Ireland, and eu-west-1c is one of its Availability Zones.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#core-aws-services","title":"Core AWS Services","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#compute","title":"Compute","text":"<p>Compute services provide the backbone for processing power on AWS. These services allow you to run applications, perform calculations, and host servers in a scalable environment.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture","title":"Importance to AWS Architecture","text":"<p>Compute services are essential for handling the dynamic workloads of modern applications.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services","title":"Services","text":"<ul> <li>Amazon EC2 (Elastic Compute Cloud): Provides resizable virtual machines (instances) for running applications.</li> <li>AWS Lambda: A serverless compute service that runs code in response to events.</li> <li>Amazon ECS (Elastic Container Service): A highly scalable container management service that supports Docker containers.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#storage","title":"Storage","text":"<p>AWS offers several storage solutions to securely store and manage data, from object storage to block storage and archival solutions.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_1","title":"Importance to AWS Architecture","text":"<p>Reliable and scalable storage is key for data persistence, disaster recovery, and regulatory compliance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_1","title":"Services","text":"<ul> <li>Amazon S3 (Simple Storage Service): Object storage service for storing large amounts of unstructured data.</li> <li>Amazon EBS (Elastic Block Store): Block storage for use with Amazon EC2 instances.</li> <li>Amazon Glacier: Low-cost archival storage for infrequently accessed data.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#networking","title":"Networking","text":"<p>AWS networking services provide the infrastructure to manage connectivity between AWS resources, the internet, and private on-premises environments.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_2","title":"Importance to AWS Architecture","text":"<p>Networking services are critical for creating highly available, secure, and fast network architectures.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_2","title":"Services","text":"<ul> <li>Amazon VPC (Virtual Private Cloud): Allows you to define a logically isolated section of the AWS Cloud to run AWS resources.</li> <li>AWS Direct Connect: Provides a dedicated network connection from your premises to AWS.</li> <li>Elastic Load Balancing (ELB): Automatically distributes incoming traffic across multiple EC2 instances.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#databases","title":"Databases","text":"<p>AWS offers various types of databases, from relational to NoSQL, that are fully managed to simplify deployment and scaling.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_3","title":"Importance to AWS Architecture","text":"<p>Databases are foundational for handling transactional data, big data analytics, and operational workloads.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_3","title":"Services","text":"<ul> <li>Amazon RDS (Relational Database Service): Managed relational database service for databases like MySQL, PostgreSQL, and Oracle.</li> <li>Amazon DynamoDB: A NoSQL database for applications needing low-latency performance at scale.</li> <li>Amazon Redshift: Data warehousing service designed for fast, scalable analytics on structured data.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#content-delivery","title":"Content Delivery","text":"<p>AWS provides services to deliver content efficiently and securely to users around the world.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_4","title":"Importance to AWS Architecture","text":"<p>Content delivery ensures fast and secure delivery of data, applications, and videos to a global audience with low latency.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_4","title":"Services","text":"<ul> <li>Amazon CloudFront: Content delivery network (CDN) service that speeds up the distribution of static and dynamic web content.</li> <li>AWS Global Accelerator: Improves the availability and performance of your global applications by routing traffic to the best-performing AWS regions.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#security","title":"Security","text":"<p>AWS provides security services that help protect data, applications, and the infrastructure.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_5","title":"Importance to AWS Architecture","text":"<p>Security is crucial for protecting sensitive data, ensuring compliance, and mitigating cyberattacks.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_5","title":"Services","text":"<ul> <li>AWS IAM (Identity and Access Management): Manages user access and permissions securely.</li> <li>AWS Shield: A managed Distributed Denial of Service (DDoS) protection service.</li> <li>AWS Key Management Service (KMS): Helps manage the encryption keys used to encrypt data.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#monitoring-and-management","title":"Monitoring and Management","text":"<p>AWS offers tools to monitor and manage your resources, applications, and infrastructure.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_6","title":"Importance to AWS Architecture","text":"<p>Monitoring and management services help ensure the health and performance of your applications, reduce downtime, and troubleshoot issues in real-time.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_6","title":"Services","text":"<ul> <li>Amazon CloudWatch: Monitors AWS resources and applications in real-time.</li> <li>AWS CloudTrail: Provides a history of AWS API calls for governance, compliance, and debugging.</li> <li>AWS Config: Tracks changes to AWS resources to ensure they comply with organizational policies.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#elasticity-and-scaling","title":"Elasticity and Scaling","text":"<p>AWS services offer the ability to automatically scale resources based on demand.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_7","title":"Importance to AWS Architecture","text":"<p>Elasticity ensures that applications can automatically adjust to fluctuating demands, reducing cost and ensuring efficient use of resources.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_7","title":"Services","text":"<ul> <li>Auto Scaling: Automatically adjusts the number of EC2 instances based on traffic and load.</li> <li>Amazon RDS Read Replicas: Automatically scale out read-heavy workloads.</li> <li>AWS Elastic Beanstalk: Automatically scales your web application based on traffic demands.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#serverless-architecture","title":"Serverless Architecture","text":"<p>Serverless architecture allows developers to build and run applications without managing the underlying infrastructure.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#importance-to-aws-architecture_8","title":"Importance to AWS Architecture","text":"<p>Serverless services remove the need for server management, enabling rapid application development and scaling, as well as cost-efficiency.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#services_8","title":"Services","text":"<ul> <li>AWS Lambda: Executes code in response to triggers without provisioning or managing servers.</li> <li>Amazon API Gateway: Fully managed service for creating, publishing, and maintaining APIs.</li> <li>AWS Step Functions: Coordinates the components of distributed applications using workflows.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/01%20-%20AWS%20Architecture/#key-benefits-of-aws-global-architecture","title":"Key Benefits of AWS Global Architecture","text":"<ol> <li>Scalability: Easily scale resources up or down in any Region or AZ.</li> <li>Low Latency: Thanks to the global distribution of Edge Locations, AWS services can be accessed with low latency from almost anywhere.</li> <li>High Availability: The use of multiple AZs and Regions ensures that AWS services remain available even in the case of localized outages.</li> <li>Compliance and Governance: With Regions worldwide, AWS helps companies meet data residency and compliance regulations.</li> <li>Disaster Recovery: AWS supports robust disaster recovery plans using cross-Region replication and backup services.</li> </ol> <p>AWS\u2019s global infrastructure is built for flexibility, scalability, and reliability, making it one of the most sophisticated cloud platforms available today. This structure allows businesses to deploy resilient, globally distributed applications while minimizing latency and ensuring compliance with local regulations.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/02%20-%20EC2%20and%20its%20Pricing/","title":"EC2 and its Pricing","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/02%20-%20EC2%20and%20its%20Pricing/#what-is-ec2","title":"What is EC2?","text":"<p>Amazon Elastic Compute Cloud (Amazon EC2) provides on-demand, scalable computing capacity in the Amazon Web Services (AWS) Cloud. Using Amazon EC2 reduces hardware costs so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. You can add capacity (scale up) to handle compute-heavy tasks, such as monthly or yearly processes, or spikes in website traffic. When usage decreases, you can reduce capacity (scale down) again. In practice, EC2 makes life easier for developers by providing secure, and resizable compute capacity in the cloud. It greatly eases the process of scaling up or down, can be integrated into several other services, and comes with a plan where you only pay for how much you use it.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/02%20-%20EC2%20and%20its%20Pricing/#features","title":"Features","text":"<ul> <li>Instances - Virtual Servers</li> <li>Amazon Machine Images (AMIs) - Preconfigured templates for your instances that package the components you need for your server (including the operating system and additional software).</li> <li>Instance Types - Various configurations of CPU, memory, storage, networking capacity, and graphics hardware for your instances.</li> <li>Amazon EBS volumes - Persistent storage volumes for your data using Amazon Elastic Block Store (Amazon EBS).</li> <li>Instance store volumes - Storage volumes for temporary data that is deleted when you stop, hibernate, or terminate your instance.</li> <li>Key pairs - secure login information for your instances. AWS stores the public key and you store the private key in a secure place.</li> <li>Security Groups - A virtual firewall that allows you to specify the protocols, ports, and source IP ranges that can reach your instances, and the destination IP ranges to which your instances can connect.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/02%20-%20EC2%20and%20its%20Pricing/#related-services","title":"Related Services","text":"<ul> <li>Amazon EC2 Auto Scaling</li> <li>AWS Backup</li> <li>Amazon CloudWatch</li> <li>Elastic Load Balancing</li> <li>Amazon GuardDuty</li> <li>EC2 Image Builder</li> <li>AWS Launch Wizard</li> <li>AWS Systems Manager</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/02%20-%20EC2%20and%20its%20Pricing/#pricing-for-amazon-ec2","title":"Pricing for Amazon EC2","text":"<ul> <li>Free Tier - You can get started with Amazon EC2 for free.</li> <li> <p>Spot Instances EC2 Spot pricing is by far the cheapest, saving you up to 90% off standard pricing. This pricing method lets you use surplus EC2 computing capacity for yourself until AWS needs it back for other customers.   Spot prices are not fixed. There is a bidding process for them, and AWS constantly adapts them to market demand across different Availability Zones. The only time you use them is when your bid (request rate) is higher than the offered Spot Price.   Here\u2019s the tradeoff. If others outbid you on your maximum price, or if demand increases and supply decreases, AWS discontinues your Spot Instances. For fault-intolerant applications, this interruption can lead to service disruption.   In addition, Amazon EC2 automatically switches to the more expensive On-Demand pricing after reclaiming Spot instances, which can blow a hole in your budget.   Now, you could manually configure Hibernate or Pause-Stop features to mitigate the risks. With multiple instances or use cases running, this can be overwhelming and time-consuming. Fortunately, tools like Xosphere automate switching between Spot instances so you can take advantage of Spot pricing.</p> </li> <li> <p>Reserved Instances - If you commit to consistent usage over one or three years, using EC2 Reserved Instances pricing can save you up to 72% compared to On-Demand prices. The other advantage here is that you get to reserve capacity in a specific Availability Zone, enabling you to launch new instances whenever you need them.</p> </li> <li>Standard Reserved Instances pricing enables you to save up to 72% vs On-Demand pricing, and you can change the Availability Zone, instance size, and networking of your Standard RIs within the contract term.</li> <li>Convertible Reserved Instances pricing lets you apply up to 66% discounts across instance types, tenancy types, and operating systems of your RIs during the contract period.</li> </ul> <p>Like Savings Plans, you can pay for RIs all upfront, partially upfront, or monthly without a down payment. Of course, the more you pay upfront, the higher your savings.</p> <ul> <li> <p>On-Demand Instances - EC2 On-Demand pricing lets you choose any instance type and size, scale resources up and down as needed, and pay only for what you use. No upfront payments. No long-term commitment required. You can also decide when specific EC2 instances should be deployed, terminated, rebooted, or hibernated. Billing is also hourly or per second. In addition, EC2 On-Demand pricing is available for all Availability Zones (AZs), Regions, and operating systems (Linux, Windows, and RedHat Enterprise Limited Edition (RHEL)). This is also the default pricing for EC2 instances and offers the most flexibility. The tradeoff is that On-Demand pricing is more expensive than other EC2 pricing methods, as you\u2019ll notice below. Also, On-Demand pricing is highly variable and depends on your choice of region/availability zone, OS, instance type, and instance size.</p> </li> <li> <p>Dedicated Hosts - A dedicated host is essentially a physical server that provides instance capacity specifically to you. This EC2 pricing method blends the resilience and flexibility of the AWS public cloud with the cost savings of using your own licenses (such as your Windows SQL server license).   The plan bills users based on the On-Demand rate per hour, not per second. However, if you purchase them on a reservation basis for one or three years, you get up to 70% off On-Demand hourly pricing.   You can also save up to 72% on Dedicated Hosts versus On-Demand pricing when you use Savings Plans for Dedicated Hosts.   This pricing approach makes sense for companies seeking to maintain compliance or minimize hardware sharing for security reasons.</p> </li> <li> <p>Savings Plan - A one- or three-year EC2 Savings Plan can save you up to 72% off regular On-Demand pricing. AWS Savings Plans require you to commit to consistent usage in dollars per hour, such as $8/hour for one or three years. Amazon EC2 Instance Savings Plans let you switch between EC2 instance types and operating systems during your contract period. But it locks you into one instance type (family) and AWS Region over the course of that contract. Say, you configured an M5.xl instance in US East (North Virginia) running Windows, to begin with. An EC2 Instance Savings Plan lets you:</p> </li> <li>Increase or decrease the instance size to suit changes in your usage</li> <li>Switch from Windows to a Linux instance, and vice versa</li> <li>Change tenancy (dedicated or shared)</li> <li>Change Availability Zone (AZ)</li> </ul> <p>For example, you can switch from the M5.xl running Windows in US East (North Virginia) to an M5.2xl running Linux in US East (North Virginia) to increase capacity. But you won\u2019t be able to switch from the M5.xl running Windows to a T3.xl running Windows or Linux. Also, you cannot migrate to US West (Ohio) to host the same Windows M5.xl instance. Compute Savings Plans offer discounts of up to 66% compared to On-Demand EC2 pricing. Despite their lower discounts, these plans apply to multiple AWS services (Amazon EC2, AWS Fargate, and AWS Lambda), regions, instance families, instance sizes, and operating systems. One more thing. Your Savings Plans discount amount will also depend on the payment plan you choose:</p> <ul> <li>All upfront \u2013 Get the most savings when you pay for the entire plan at the beginning</li> <li>Partial upfront \u2013 Save when you pay at least 50% down</li> <li>No upfront \u2013 You\u2019ll pay your commitment monthly over the term of your contract with some savings</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/","title":"Guide to Launching Your First EC2 Instance","text":"<p>In the AWS Management Console, type <code>EC2</code> in the search bar or locate it under the Services menu. Click on EC2 to open the EC2 Dashboard.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#1-launching-the-instance","title":"1. Launching the Instance","text":"<p>On the EC2 Dashboard, click the Launch Instance button to start the instance creation process.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#2-naming-and-tagging-your-instance","title":"2. Naming and Tagging Your Instance","text":"<p>Create a name for your instance. If you want to add a tag, click on Add additional tags.</p> <p></p> <p>Tags help in identifying, organizing, and managing your instances, especially when dealing with multiple resources. Example:</p> <ul> <li>Key: Backup</li> <li>Value: ServerBackup</li> <li>Resource Type: EBS Volume</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#3-selecting-an-ami-amazon-machine-image","title":"3. Selecting an AMI (Amazon Machine Image)","text":"<p>AMIs are preconfigured templates for your instances, containing the operating system and software you want. Choose \u2018Amazon Linux\u2019 for this workshop.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#31-choose-64-bit-x86-for-the-computer-architecture","title":"3.1. Choose \u201864-bit (x86)\u2019 for the computer architecture.","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#4-choosing-an-instance-type","title":"4. Choosing an Instance Type","text":"<p>An instance type in Amazon EC2 defines the virtual hardware for your server, such as CPU, memory, storage, and network capacity. Different types are suited for different workloads. </p> <ul> <li>Choose t2.micro for this one as it's affordable, Free Tier eligible, and offers on-demand usage where you only pay for what resources you use.</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#5-configuring-a-key-pair","title":"5. Configuring a Key Pair","text":"<p>A key pair in Amazon EC2 consists of a public and private key used for securely connecting to your instance. AWS provides the public key for the server, while you download the private key as a <code>.pem</code> file. Let's create a new key pair.</p> <p></p> <p>Let's name it <code>keypair</code> and click Create Key Pair. It will automatically download. Move it in a folder where you can easily access it, as you will need it to connect to your instance later.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#6-configuring-networking","title":"6. Configuring Networking","text":"<p>These are some minute networking details for your instance.</p> <ul> <li>Network: The network defines the Virtual Private Cloud (VPC) where your instance will reside, isolating your server and enabling you to control it.</li> <li>Subnet: A subnet is a segment of a VPC's IP address range, allowing you to group resources logically by having an efficient network structure.</li> <li>Auto-assign Public IP: This setting automatically assigns a public IP address to your instance, enabling direct internet access.</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#7-configuring-security-groups","title":"7. Configuring Security Groups","text":"<p>Security groups act as virtual firewalls for your Amazon EC2 instances. They control inbound and outbound traffic based on defined rules. Choose create security group and check allow SSH traffic. This allows us to connect to our instance later.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#8-configuring-storage","title":"8. Configuring Storage","text":"<p>This will specify the storage options of your instance. Leave the option as it is. Here are the details you need to know:</p> <ul> <li>1x: This indicates that there is one volume attached as the root volume to the EC2 instance.</li> <li>8 GiB: This specifies the size of the root volume, which is 8 GiB (Gibibytes). This is the amount of storage allocated for the instance's operating system and any applications installed on it.</li> <li>gp3: This indicates the type of storage volume. gp3 is a type of General Purpose SSD (Solid State Drive) that offers a balance of price and performance. It provides faster and more consistent performance compared to standard magnetic disks.</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#9-reviewing-and-launching","title":"9. Reviewing and Launching","text":"<p>Review your configured instance. If everything looks correct, click launch instance.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#10-accessing-the-instance","title":"10. Accessing the Instance","text":"<p>You will proceed to this page, just click the instance ID. An Instance ID is a unique identifier assigned to each instance upon launch. This ID is used to track, manage, and connect to specific instances. Think of it like a unique ID number for each person. Each EC2 instance has its own Instance ID for identification.</p> <p></p> <p>The instance will take time to initialize. It will usually take 2-3 minutes. </p> <p></p> <p>You can see the instance is ready if the status is on 2/2 checks passed. To know what this mean we need to know these concepts. Click on status and alarms. - System reachability check: Verifies the underlying AWS infrastructure is healthy. - Instance reachability check: Ensures the specific EC2 instance is operational and reachable.</p> <p></p> <p>Click on the instance ID to view the details. </p> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#congratulations","title":"Congratulations!","text":"<p>You have successfully launched your first instance. Welcome to the world of cloud computing and painful billings!</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#cleaning-up","title":"Cleaning Up:","text":"<ul> <li>Terminating the instance: To avoid unnecessary charges, remember to terminate the instance when you're done using it. You can do this by selecting the instance and clicking Actions &gt; Instance State &gt; Terminate.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/03%20-%20Launching%20your%20own%20instance/#optional-setting-up-rdp-ami-instance","title":"Optional: Setting up RDP AMI Instance","text":"<ul> <li>RDP: Remote Desktop Protocol - This will provide us a graphical interface that lets you interact with the remote desktop, just like you would on your local machine. This will be useful if you want to use Windows-based server. Lets test this later.</li> </ul> <p>Choose Microsoft Windows Server as the AMI base.  </p> <p></p> <p>Check the instance summary, then you're done!  </p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/","title":"Making an EC2 Instance using AWS CLI","text":"<p>AWS Command Line Interface (CLI) allows you to interact with AWS services programmatically.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#what-are-iam-access-keys","title":"What are IAM Access Keys?","text":"<p>IAM Access Keys consist of two components: an Access Key ID and a Secret Access Key. These keys are analogous to a username and password and are used to sign programmatic requests to AWS services.</p> <p>The Access Key ID is a unique identifier, while the Secret Access Key is a secret that should only be known by the user who owns the key.</p> <p>IAM Access Keys are required when you interact with AWS services via the AWS CLI, SDKs, or APIs. They are essential for tasks like launching EC2 instances programmatically.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#why-do-we-need-access-keys","title":"Why do we need Access Keys?","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#1-security-and-access-control","title":"1. Security and Access Control","text":"<ul> <li>Non-Root Access: It's a best practice to avoid using root account credentials. Instead, you can create IAM users with Access Keys and specific roles/permissions to reduce risk.</li> <li>Granular Permissions: You can assign precise permissions to IAM users, following the principle of least privilege, and ensure the Access Keys only allow specific actions or access to certain AWS resources.  </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#2-programmatic-access","title":"2. Programmatic Access","text":"<ul> <li>APIs and SDKs: AWS SDKs and APIs rely on Access Keys for programmatic access to AWS services.  </li> <li>Command Line Interface (CLI): The AWS CLI uses these keys for authentication when managing AWS resources from the command line.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#3-automating","title":"3. Automating","text":"<ul> <li>CI/CD Pipelines: Automation tools like Jenkins or GitLab use Access Keys to authenticate and automate tasks in your AWS account, including launching EC2 instances.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#how-to-create-access-keys-in-the-management-console","title":"How to Create Access Keys in the Management Console","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#1-navigate-to-the-iam-service","title":"1. Navigate to the IAM Service","text":"<p>In the AWS Management Console, search for \"IAM\" and click on the IAM service.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#2-select-a-user","title":"2. Select a User","text":"<p>In the \"Users\" section, click on the username you created.</p> <p></p> <p>if you don't have one, refer to this guide First Line of Defense - IAM Users and ARNs</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#21-create-access-keys-using-the-root-account-optional","title":"2.1 Create Access Keys Using the Root Account (Optional)","text":"<p>If you do not have an IAM user, you can use your root account to create access keys. However, it\u2019s important to note that using root account credentials is not a best practice due to security risks. If you choose to proceed, follow these steps:</p> <ol> <li> <p>Log in to the AWS Management Console using your root account credentials.</p> </li> <li> <p>Click on your account name in the top right corner and select My Security Credentials.</p> </li> <li> <p>In the Access Keys section, you can create access keys for the root account by clicking on Create New Access Key.</p> </li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#3-create-access-keys","title":"3. Create Access Keys","text":"<p>Once a user is selected, create an access key by clicking the Create Access Key button.</p> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#4-download-the-access-key","title":"4. Download the Access Key","text":"<ul> <li>Download the <code>.csv</code> file or copy the Access Key ID and Secret Access Key immediately.</li> <li>Remember: AWS does not store the Secret Access Key, so if you lose it, you will need to create a new one.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#how-to-install-and-configure-aws-cli","title":"How to Install and Configure AWS CLI","text":"<p>To interact with AWS services programmatically, you\u2019ll need to install the AWS CLI and configure it with your IAM Access Keys.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-1-install-unzip-linux-or-wsl","title":"Step 1: Install unzip (Linux or WSL)","text":"<pre><code>sudo apt install unzip \n</code></pre> <p>This command installs the unzip utility, which is required to extract the AWS CLI installation files.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-2-download-and-install-aws-cli","title":"Step 2: Download and Install AWS CLI","text":"<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n\nunzip awscliv2.zip\n\nsudo ./aws/install\n</code></pre>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-3-verify-aws-cli-installation","title":"Step 3: Verify AWS CLI Installation","text":"<pre><code>aws --version\n</code></pre>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-4-configure-aws-cli-with-iam-access-keys","title":"Step 4: Configure AWS CLI with IAM Access Keys","text":"<pre><code>aws configure\n</code></pre> <p>Upon running the command, you'll be prompted to enter your credentials:  </p> <pre><code>AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID\n\nAWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY\n\nDefault region name [None]: [click enter]\n\nDefault output format [None]: [click enter]\n</code></pre> <p></p> <p>This sets up your default profile to authenticate your requests to AWS.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#creating-an-ec2-instance-using-aws-cli","title":"Creating an EC2 Instance Using AWS CLI","text":"<p>Once AWS CLI is configured, you're ready to create an EC2 instance. Here's how:</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-1-launch-the-ec2-instance","title":"Step 1: Launch the EC2 Instance","text":"<p>Use the following command to launch a t2.micro instance with the name 'awscli-instance', using the default security group and a key pair pemfile named 'keypair' that we made earlier (just replace the keypair name with your own). You can also omit the --key-name command if you dont want to put one: </p> <p>image-id as: ami-0aa097a5c0d31430a This is the Amazon Linux 2023 AMI, the one we used earlier. </p> <pre><code>aws ec2 run-instances \\\n    --image-id ami-0aa097a5c0d31430a \\\n    --instance-type t2.micro \\\n    --key-name keypair \\\n    --security-group-ids default \\\n    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=awscli-instance}]'\n</code></pre> <p>if you dont want to have a keypair, you can remove the --key-name command.</p> <pre><code>aws ec2 run-instances \\\n    --image-id ami-0aa097a5c0d31430a \\\n    --instance-type t2.micro \\\n    --security-group-ids default \\\n    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=awscli-instance}]' \n</code></pre> <p>You will see the instance details after it is succesfully created.</p> <p></p> <p></p> <p>use <code>q</code> if you want to stop viewing the instance detail.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/04%20-%20Creating%20an%20ec2%20instance%20using%20aws%20cli/#step-2-verify-the-status-of-the-instance","title":"Step 2: Verify the status of the instance","text":"<p>This command will show all the instances in the region, including the status of the instance you just created in a table format.</p> <pre><code>aws ec2 describe-instance-status --include-all-instances --output table\n</code></pre> <p></p> <p>or to view with the instance name</p> <pre><code>aws ec2 describe-instances \\\n    --query 'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`].Value]' \\\n    --output table\n</code></pre> <p></p> <p>use <code>q</code> if you want to stop viewing the instances.  </p> <p>You can check the synopsis of all the query avaialable here https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instance-status.html</p> <p>or if you want to fully navigate ec2 commands using aws cli, you can check the documentation here https://docs.aws.amazon.com/cli/latest/reference/ec2/</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/","title":"All About Connecting to an Instance","text":"<p>An EC2 instance is a virtual server in Amazon's Elastic Compute Cloud (EC2) that provides scalable compute capacity. It allows users to run applications, host websites, or perform any kind of computation in the cloud without the need for physical hardware. The instance operates much like a physical computer, but it's managed and provisioned from the AWS platform. EC2 instances come with different configurations of CPU, memory, storage, and networking capacity, making them customizable for various workloads.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#why-do-we-connect-to-an-instance","title":"Why do we connect to an instance?","text":"<p>Connecting to an instance allows an access to a server in the cloud, allowing administrators and developers to manage, configure, and maintain the infrastructure remotely. By connecting, we can install and update software, troubleshoot issues, and monitor performance. It ensures that cloud-hosted services are secure and functions efficiently.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#secure-shell-ssh","title":"Secure Shell (SSH)","text":"<p>EC2 supports different methods for connecting to instances using SSH, including direct connections using an SSH client or browser-based SSH connections using EC2 Instance Connect. SSH is widely used for securely connecting to remote servers, particularly Linux-based systems. Additionally, every connection attempt via SSH is logged, making it easier to audit and track who accessed the instance. This is especially important in environments with multiple users and instances.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#what-is-key-pair","title":"What is Key-pair?","text":"<p>A key pair is a set of two cryptographic keys\u2014a public key and a private key\u2014that work together to secure access to your Amazon EC2 instance.</p> <p></p> <p>It consists of:</p> <p>Public Key - stored on the EC2 instance and can be shared publicly</p> <p>Private Key - stored seccurely on your computer, ensuring that only authorize users can connect to the EC2 environment</p> <p>These two keys work together to encrypt and decrypt data, enabling secure, password-free access to servers.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#ssh-and-key-pair","title":"SSH and Key-Pair","text":"<p>SSH (Secure Shell) uses public-key cryptography, a method of encryption that relies on two mathematically linked keys, known as a key pair: a public key (shareable) and a private key (secret). In SSH, two separate key pairs are involved\u2014user key pair (client) and host key pair (server)\u2014each with its own public and private key. This dual setup enhances mutual authentication and ensures a secure SSH connection between the client and server.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#how-the-key-pairs-work-in-ssh","title":"How the Key Pairs Work in SSH","text":"<ul> <li> <p>User (Client-Side Authentication) Key Pair:</p> <ul> <li>Private Key: Stored securely on the user's local machine. It is never transmitted or shared and is used to authenticate the user by digitally signing requests during the SSH handshake.</li> <li>Public Key: Shared with the server to allow authentication. It is used by the server to validate the user\u2019s private key during authentication.</li> </ul> </li> <li> <p>Host (Server-Side Authentication) Key Pair:</p> <ul> <li>Private Key: Stored securely on the server. It is used to decrypt encrypted communications and is never exposed to the client.</li> <li>Public Key: Provided to users when they first connect to the server. SSH clients store this public key and use it to verify the server\u2019s identity in future sessions.</li> </ul> </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#ssh-handshake","title":"SSH Handshake","text":"<p>The SSH Handshake is a foundational process in the SSH protocol that establishes a secure and authenticated connection between a client (your local machine) and a server (such as an EC2 instance). This handshake ensures that only trusted users and servers can access or communicate over the connection. It involves the use of key pairs, which play a crucial role in both authentication and encryption during the process. The client uses its private key to authenticate itself to the server, while the server presents its public key to verify its identity.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#benefits","title":"Benefits","text":"<ol> <li>Security - The SSH handshake establishes key parameters, such as encryption algorithms, to ensure effective data exchange between the client and the server.</li> <li>Synchronization - Ensures that both the client and server are ready to communicate securely, preventing issues such as data being sent too quickly or at an inappropriate time, which can disrupt the connection.</li> <li>Error Identification - The handshake detects potential errors before establishing a secure connection, preventing data corruption.</li> <li>Setting Communication Parameters - The SSH handshake establishes key parameters, such as encryption algorithms, to ensure effective data exchange.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#4-method-of-connecting-to-an-instance","title":"4 Method of Connecting to an Instance","text":"<p>There are 4 ways of connecting to an instance. Amazon EC2 offers various methods for connecting to instances depending on the operating system of the instance and the user's needs. Each of these ways has distinct use cases, security mechanisms, and platform compatibility. 1. EC2 Instance Connect 2. SSH Client 3. Remote Desktop Protocol (RDP) 4. Session Manager</p> <p>In this workshop, let us discuss the first three ways to connect to an instance.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#method-1-ec2-instance-connect","title":"Method 1: EC2 Instance Connect","text":"<p>Connecting via EC2 Instance Connect is a feature that enables a secure connection to your Linux instances over SSH. EC2 Instance Connect allows you to connect to your instance directly through your browser. It refers to the feature in Amazon Web Services (AWS) that enables users to connect to their EC2 instances using SSH through the AWS Management Console, without the need for a standalone SSH client. It allows you to use AWS Identity and Access Management (IAM) policies and users to control SSH access without needing to share or manage SSH keys. </p> <p></p> <p>Prerequisites for installing and using EC2 Instance Connect:</p> <ol> <li>EC2 Instance Connect Package: Ensure the EC2 Instance Connect package is installed on your EC2 instance.</li> <li>Network Accessibility: Confirm that your instance is accessible over the network.</li> <li>SSH Traffic Configuration: Adjust security group settings to allow incoming SSH traffic (TCP on port 22).</li> <li>User Permissions: Make sure your IAM user has the necessary permissions to utilize EC2 Instance Connect.</li> <li>Correct Username: Use the appropriate username based on the Linux distribution of your EC2 instance.</li> </ol> <p>Here are some of the usernames:  - Ubuntu: ubuntu  - Amazon Linux: ec2-user  - CentOS: root, centos or ec2-user  - Debian: admin  - Fedora: fedora or ec2-user  - RHEL (Red Hat Enterprise Linux): ec2-user or root  - SUSE: ec2-user or root  - Oracle: ec2-user  - Bitnami: bitnami  - Rocky Linux: rocky  - Others</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#method-2-ssh-client","title":"Method 2: SSH Client","text":"<p>Connecting to an instance through SSH Client involves using encryption and key-pair authentication when connectung to EC2 Linux instances. This method enables us to associate with key pair.</p> <p></p> <p>Prerequisites for Connecting EC2 Instance Using SSH</p> <ol> <li>SSH Key (.pem file): A private key used for authenticating your identity when connecting to the EC2 instance.</li> <li>IP Address: The public address assigned to the EC2 instance, required to direct the SSH client to the correct server.</li> <li>Username: The default login name for the specific Linux distribution on the instance, necessary for authentication. </li> </ol> <p>Some SSH Usernames:  - Ubuntu: ubuntu  - Amazon Linux: ec2-user  - CentOS: centos  - BitNami: bitnami  - NanoStack: ubuntu  - Others</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/05%20-%20All%20About%20Connecting%20to%20an%20Instance/#method-3-remote-desktop-protocol-rdp","title":"Method 3: Remote Desktop Protocol (RDP)","text":"<p>Remote Desktop Protocol (RDP) enables multiple users to connect to a window instances. Users can have separate sessions on the same server, allowing them to run different applications, access different files, and have their own desktop environments without interfering with each other\u2019s work.</p> <p></p> <p>Prerequisite for Connecting Instance using RDP</p> <ol> <li>RDP Client: Install an RDP client (e.g., mstsc for Windows, Microsoft Remote Desktop for macOS, Remmina for Linux).</li> <li>Instance Details: Have the IP address or hostname of the instance.</li> <li> <p>Network Configuration: Allow inbound RDP traffic on TCP port 3389 in your firewall/security group.</p> </li> <li> <p>Instance Status: Ensure the instance is running and has passed status checks.</p> </li> <li>Credentials: Obtain the administrator password or domain credentials.</li> <li>Public IP Address: Ensure the instance has a public IP if connecting over the internet.</li> <li>Authentication: Set up any required authentication methods (e.g., IAM permissions).</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/","title":"Connecting to your instance","text":"<p>After launching your EC2 instance, follow these steps to connect:</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#1-start-by-clicking-the-instance-id","title":"1. Start by Clicking the Instance ID","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#2-access-instance-details","title":"2. Access Instance Details","text":"<p>After selecting your instance, you'll see all the details pertaining to it. To connect to your instance, click the Connect button on the upper right-hand corner of the page.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#3-choose-a-connection-method","title":"3. Choose a Connection Method","text":"<p>There are four primary ways to connect to your instance:</p> <ol> <li>EC2 Instance Connect </li> <li>SSH Client </li> <li>Remote Desktop Protocol (RDP) - for Windows instances only.</li> <li>Session Manager </li> </ol> <p>Let's do the first 3 methods for this workshop.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#method-1-ec2-instance-connect","title":"Method 1: EC2 Instance Connect","text":"<p>EC2 Instance Connect allows you to connect to your instance directly through your browser.</p> <ul> <li>Select EC2 Instance Connect as the connection method.</li> <li>Use the Public IPv4 address of your instance.</li> <li>Make sure your username is set to the default (<code>ec2-user</code> for Amazon Linux, <code>ubuntu</code> for Ubuntu).</li> <li>Click Connect.</li> </ul> <p></p> <p>This will open a browser-based CLI that allows you to interact with your instance without needing an SSH key pair.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#method-2-ssh-client","title":"Method 2: SSH Client","text":"<p>Using an SSH Client is one of the most common ways to connect to an EC2 instance, especially for Linux-based instances.</p> <ol> <li>Make sure you have an SSH key pair created during the instance launch.</li> <li>Download the <code>.pem</code> private key file if you haven't already.</li> <li>Get the location of your <code>.pem</code>. If you let it download by itself. It is probably in your <code>Downloads</code> folder.  </li> </ol> <p>Copy the pem file to your home &gt; user folder.  </p> <p></p> <p>Do this command to make the pem file secure. This will prevent unauthorized access to the file by making it read only. <code>chmod 400 \"keypair.pem\"</code> </p> <p></p> <p>Lets connect to our instance, do <code>ssh -i keypair.pem ec2-user@&lt;your-instance-public-ip&gt;</code>. Replace <code>your-instance-public-ip</code> with the Public IPv4 address of your instance.</p> <p>Or we can just simply copy the command from the AWS console.</p> <p></p> <p>Paste it on your terminal and press enter. Just choose yes as the answer to the prompt.</p> <p></p> <p>You are now connected to your instance using SSH Client.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/06%20-%20Connecting%20to%20your%20instance/#method-3-remote-desktop-protocol-rdp-for-windows-instances-only","title":"Method 3: Remote Desktop Protocol (RDP) (For Windows Instances Only)","text":"<p>RDP is used to connect to Windows instances. Follow these steps to use RDP:</p> <ol> <li>Click on the Connect button at the top of the instance details page.</li> <li>Select the RDP Client tab.</li> <li>Click on Get Password.</li> </ol> <p></p> <ol> <li>Click Browse and select your <code>.pem</code> file (the key pair you created). Then click Decrypt Password.</li> </ol> <p></p> <ol> <li>Note the Administrator password that is displayed. Lets copy that.</li> </ol> <p></p> <ol> <li>Still in the RDP Client tab, click on Download Remote Desktop File. This will download an <code>.rdp</code> file to your local machine.</li> </ol> <p></p> <ol> <li>Locate the downloaded <code>.rdp</code> file on your computer and double-click it. This will open the Remote Desktop Connection application.</li> </ol> <p></p> <p>There will be a prompt after that, just click connect.</p> <p></p> <ol> <li>Enter the administrator passworrd you copied earlier. The username is <code>Administrator</code>. Click OK to connect.</li> </ol> <p></p> <ol> <li>You may receive a warning about the identity of the remote computer. Check the box to not be prompted again (if you wish) and click Yes to continue.</li> </ol> <p></p> <p>Congratulations! You are now connected to your Windows EC2 instance via RDP. You can now use it as you would a local Windows machine.</p> <p></p> <p>You can now connect to your EC2 instance using one of the above methods. Whether through a browser, SSH client, or RDP, AWS provides flexibility based on your needs and the instance's operating system.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/07%20-%20Security%20Group/","title":"Security Groups: Managing traffic with firewalls.","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/07%20-%20Security%20Group/#what-is-a-security-group","title":"What is a Security Group?","text":"<p>A Security Group in AWS functions as a virtual firewall for your EC2 instances. It controls the inbound and outbound traffic to and from your instances. Essentially, it is a set of rules that define the allowed traffic based on IP addresses, port numbers, and protocols. Security groups are pivotal in ensuring that only legitimate traffic reaches your instances, thereby protecting them from unauthorized access and potential threats.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/07%20-%20Security%20Group/#role-of-security-groups-in-ec2-instances","title":"Role of Security Groups in EC2 Instances","text":"<p>When you launch an EC2 instance, you can associate it with one or more security groups. These groups play an important role in managing the traffic flow:</p> <p>1. Inbound Rules: These rules control the incoming traffic to your instance. For example, you can allow SSH traffic (port 22) from a specific IP address or range, enabling secure remote access to your instance. This ensures that only trusted sources can connect to your instance, reducing the risk of unauthorized access.</p> <p>2. Outbound Rules: These rules manage the outgoing traffic from your instance. By default, all outbound traffic is allowed, but you can restrict it based on your security requirements. For instance, you might want to allow outbound traffic only to specific IP ranges or ports to prevent data exfiltration.</p> <p>3. Stateful Nature: Security groups are stateful, meaning if you send a request from your instance, the response traffic for that request is automatically allowed to flow in, regardless of inbound rules. Similarly, responses to allowed inbound traffic are allowed to flow out. This stateful behavior simplifies the management of traffic rules, as you don\u2019t need to create separate rules for response traffic.</p> <p>4. Dynamic Updates: You can modify the rules of a security group at any time, and the changes are automatically applied to all associated instances. This flexibility allows you to adapt to changing security needs without downtime. For example, if you need to open a new port for a temporary service, you can update the security group and the change will take effect immediately.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/07%20-%20Security%20Group/#best-practices-for-using-security-groups","title":"Best Practices for Using Security Groups","text":"<p>To maximize the effectiveness of security groups, consider the following best practices: Least Privilege Principle: Only allow the minimum necessary traffic. For instance, if only HTTP and HTTPS traffic is needed, restrict the security group to allow traffic only on ports 80 and 443. This minimizes the attack surface and reduces the risk of unauthorized access.</p> <p>Regular Audits: Periodically review and update your security group rules to ensure they meet your current security requirements. Over time, your security needs may change, and regular audits help ensure that your security groups remain effective.</p> <p>Use Descriptive Names: Name your security groups and rules descriptively to easily understand their purpose and scope. For example, instead of naming a security group \u201csg-12345\u201d, name it \u201cweb-server-sg\u201d to indicate that it is used for web servers.</p> <p>Segmentation: Use different security groups for different types of instances or applications. This segmentation helps isolate different parts of your infrastructure and limits the impact of a potential security breach.</p> <p>Logging and Monitoring: Enable logging and monitoring to track the traffic allowed or denied by your security groups. AWS provides tools like VPC Flow Logs and CloudWatch to help you monitor and analyze traffic patterns.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/07%20-%20Security%20Group/#understanding-ip-addresses-in-security-groups","title":"Understanding IP Addresses in Security Groups","text":"<p>IP addresses play a crucial role in security groups by defining the sources and destinations of allowed traffic:</p> <p>Source IP Address: In inbound rules, the source IP address specifies where the incoming traffic is coming from. For example, allowing traffic from 0.0.0.0/0 means accepting traffic from any IP address.</p> <p>Destination IP Address: In outbound rules, the destination IP address specifies where the outgoing traffic is going. You can restrict outbound traffic to specific IP ranges to enhance security.</p> <p>By carefully configuring these IP addresses in your security group rules, you can control access to your EC2 instances and protect your applications from unauthorized access.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/","title":"Apache Web Server Setup on EC2 instace","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#1-install-the-apache-web-server","title":"1. Install the Apache Web Server","text":"<p>Apache is an open-source web server that processes HTTP requests and serves web content. Run the following command to install Apache:</p> <pre><code>sudo yum install httpd\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#2-start-the-httpd-service","title":"2. Start the HTTPD Service","text":"<p>The following command starts the Apache (<code>httpd</code>) service, allowing the web server to handle incoming requests:</p> <pre><code>sudo service httpd start\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#3-enable-apache-to-start-on-boot","title":"3. Enable Apache to Start on Boot","text":"<p>To ensure Apache starts automatically during system boot, run the following command:</p> <pre><code>sudo chkconfig httpd on\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#4-switch-to-root-user","title":"4. Switch to Root User","text":"<p>The command <code>sudo -i</code> allows a user to switch to the root user (the superuser) with full administrative privileges:</p> <pre><code>sudo -i\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#5-navigate-to-the-apache-web-directory","title":"5. Navigate to the Apache Web Directory","text":"<p>Navigate to the directory where Apache will look for the <code>index.html</code> file (the default directory):</p> <pre><code>cd /var/www/html\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#6-create-an-indexhtml-page","title":"6. Create an <code>index.html</code> Page","text":"<p>Create a simple <code>index.html</code> file:</p> <pre><code>touch index.html\n</code></pre> <p>Verify the file exists by listing the directory contents:</p> <pre><code>ls\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#7-edit-the-indexhtml-file","title":"7. Edit the <code>index.html</code> File","text":"<p>Use <code>vim</code> or <code>nano</code> to add content to the <code>index.html</code> file:</p> <p><pre><code>vim index.html\n# or\nnano index.html\n</code></pre> For vim: Do press <code>i</code> to enter insert mode and enter the following content: <pre><code>Hello World!\n</code></pre></p> <p></p> <p>Save and exit the editor by pressing <code>Esc</code>, typing <code>:wq</code>, and pressing <code>Enter</code>.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#8-find-your-instance-public-ipv4-address","title":"8. Find Your Instance Public IPv4 Address","text":"<p>In the AWS EC2 console, click the instance ID to find its details. Copy the Public IPv4 address.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#9-test-the-web-server","title":"9. Test the Web Server","text":"<p>Open a browser and navigate to:</p> <pre><code>http://&lt;your-public-ipv4-address&gt;\n</code></pre> <p></p> <p>If the website is not accessible, this means that there is a problem with our security group settings. We need to modify the security group settings to allow incoming traffic on port 80 (HTTP).</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#10-modify-security-group-settings","title":"10. Modify Security Group Settings","text":"<p>Scroll down to the \"Security\" section, and click on your security group.</p> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#11-edit-inbound-rules","title":"11. Edit Inbound Rules","text":"<p>Click Edit Inbound Rules to control incoming traffic to your server.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#12-allow-incoming-traffic-on-port-80","title":"12. Allow Incoming Traffic on Port 80","text":"<p>Add a rule to allow incoming traffic on port 80 (HTTP). Ensure that traffic is allowed from any IP address (making it publicly accessible over the web).</p> <p></p> <p></p> <p></p> <p>Save the changes.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#121-configuring-security-group-using-aws-cli","title":"12.1 Configuring Security Group using AWS CLI","text":"<ol> <li>Describe the Security Group:</li> <li> <p>Run the following command to describe the security group:</p> <p><pre><code>aws ec2 describe-security-groups\n</code></pre> Find the security group ID that you want to modify. In our case, the security group name is <code>launch-wizard-1</code>.</p> </li> </ol> <p></p> <p>As you can see it already had permission to part 80 and port 22. Those are for HTTP and SSH respectively.</p> <p>Find its security group ID, which is in my case is <code>sg-0c1b0b8939dd8ba1a</code>.</p> <p></p> <p>copy this to a text file for later use.</p> <p>press <code>q</code> to exit the output.</p> <ol> <li>Update the Security Group:</li> <li>What if we want to add a new inbound rule for HTTPS (port 443)? Run the following command:</li> </ol> <p><code>bash aws ec2 authorize-security-group-ingress \\   --group-id &lt;your-security-groupID&gt; \\   --protocol tcp \\   --port 443 \\   --cidr 0.0.0.0/0</code></p> <p></p> <ol> <li>Verify the Changes:</li> <li> <p>Run the following command to verify the changes:</p> <pre><code>aws ec2 describe-security-groups\n</code></pre> </li> </ol> <p></p> <ol> <li>Also check using the AWS console if the changes are reflected.</li> </ol> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#13-revisit-the-public-ipv4-address","title":"13. Revisit the Public IPv4 Address","text":"<p>Visit your public IPv4 address in a browser again. Your Apache web server should now be accessible.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#14-customize-your-website","title":"14. Customize Your Website","text":"<p>For funsies, copy-paste your favorite static HTML website into this server and watch it run! Better if it had external pictures or videos to see if it works.</p> <p></p> <p>This is mine, lets watch yours!  </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/08%20-%20Learning%20SG%20with%20Apache/#15-what-if-i-dont-have-a-static-website","title":"15. What if I dont have a static website?","text":"<ul> <li>We will provide you with a simple HTML template that you can use.</li> </ul> <p>Copy paste this to vim</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;EC2 Instance&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Instance 1&lt;/h1&gt;\n    &lt;img src=\"path/to/your/image.png\" \"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Prepare some image for later use of the workshop.</li> </ul> <p>As you can see, pictures and videos wont load. Let's solve that.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/","title":"Adding files to your EC2 Instance Using S3 and IAM","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#what-is-amazon-s3","title":"What is Amazon S3?","text":"<p>Amazon S3 is an object storage service that provides industry-leading scalability, data availability, and security. It allows you to store and retrieve any amount of data at any time. In this guide, we will use S3 to store image files and transfer them to your EC2 instance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#what-is-iam","title":"What is IAM?","text":"<p>IAM allows you to manage access to AWS services and resources securely. You create policies that define which actions are allowed on specific AWS resources. Here, we will create an IAM role to give our EC2 instance permission to access files stored in S3.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#step-1-create-an-s3-bucket-and-upload-images","title":"Step 1: Create an S3 Bucket and Upload Images","text":"<p>1.1 Create an S3 bucket in the S3 Console. A bucket is a container for storing objects in S3 (like images, videos, or any file). Give your bucket a unique name (globally across AWS).</p> <p></p> <p></p> <p></p> <p></p> <p>1.2 In the bucket, click Upload, and then Add files/folder. Select the image files you want to upload.</p> <p></p> <p></p> <p>1.3 Upload the files to the S3 bucket. The files will now be stored in your S3 bucket, ready to be used in your application.</p> <p></p> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#step-2-create-an-iam-role-with-s3-access","title":"Step 2: Create an IAM Role with S3 Access","text":"<p>IAM roles allow AWS services (such as EC2) to perform actions on your behalf. In this case, we need to grant EC2 the ability to interact with S3.</p> <p>2.1 Go to the IAM Console in the AWS Management Console.</p> <p></p> <p>2.2 Click Roles, then click Create role. Roles enable EC2 to assume temporary credentials to access AWS services like S3.</p> <p></p> <p>2.3 Select EC2 as the trusted entity. This step ensures that only your EC2 instance will use this role to interact with S3.</p> <p></p> <p></p> <p>2.4 Attach the policy <code>AmazonS3FullAccess</code>. This policy allows full access to all S3 buckets and objects (though this can be customized for more fine-grained control).</p> <p></p> <p></p> <p>2.5 Click Next: Tags. Give your role a name (e.g., <code>EC2-S3-Access</code>) and a description.</p> <p></p> <p>2.5 Click Create role at the bottom of the page. You\u2019ve now created a role with permissions to access S3.</p> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#step-3-attach-the-iam-role-to-your-ec2-instance","title":"Step 3: Attach the IAM Role to Your EC2 Instance","text":"<p>Your EC2 instance needs permission to access your S3 bucket. We will now attach the IAM role to the instance.</p> <p>3.1 Go back to the EC2 Console. You should see a list of running instances.</p> <p>3.2 Click the Instance ID of the instance you want to grant S3 access. Then, go to Actions &gt; Security &gt; Modify IAM Role. This is where you attach an IAM role to your instance, enabling it to use AWS resources.</p> <p>3.3 Or, you can just simply right-click on the instance and select Security &gt; Modify IAM Role.</p> <p></p> <p>3.4 Choose the IAM role you created earlier, and then click Update IAM role. Now, your instance has the necessary permissions to access your S3 bucket.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#step-4-access-the-s3-bucket-from-your-ec2-instance","title":"Step 4: Access the S3 Bucket from Your EC2 Instance","text":"<p>Now that your instance has S3 access, let\u2019s transfer the images from your S3 bucket to the EC2 instance.</p> <p>4.1 Open the EC2 CLI (either via SSH or the AWS Console). </p> <p>4.2 Run the following command to verify your S3 bucket exists:</p> <pre><code>aws s3 ls\n</code></pre> <p></p> <p>This lists all the S3 buckets associated with your AWS account. You should see your bucket name here.</p> <p>4.3 Sync the files from your S3 bucket to the /var/www/html directory on your EC2 instance (this is the default web root directory for the Apache server):</p> <pre><code>aws s3 sync s3://&lt;your-bucket-name&gt; /var/www/html\n</code></pre> <p></p> <p>Replace  with the actual name of your S3 bucket. This command downloads all files from the S3 bucket into the web root directory of your Apache server. <p>4.4 To ensure the files were downloaded, list the contents of /var/www/html:</p> <pre><code>ls\n</code></pre> <p></p> <p>If your images are listed here, the sync process was successful. Make sure that the directory of your files is aligned with directory inside the index.html file.</p> <p>Step 5: Test Your Webpage Now that your images are on your server, let\u2019s check if everything works.</p> <p></p> <p>5.1 Open a web browser and go to:</p> <p><pre><code>http://&lt;your-public-ipv4-address&gt;\n</code></pre> </p> <p>If everything is set up correctly, you should now see the images from your S3 bucket displayed on your website.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#optional-adding-files-from-local-machine-to-ec2-instance","title":"Optional: Adding files from local machine to EC2 instance.","text":"<p>If you want to add files from your local machine to your EC2 instance, you can use the <code>scp</code> command. Here\u2019s an example:</p> <pre><code>scp -i &lt;your-key-pair&gt;.pem /path/to/local/file ec2-user@&lt;Public DNS&gt;:/path/to/remote/directory\n</code></pre> <p>Remember this command requires the path to your key pair, the path to your local file, the username of your EC2 instance (e.g., ec2-user), the Public DNS of your instance, and the path to the remote directory on your instance.</p> <p>Additional notes: we will be doing these commands to the wsl terminal instead of the ec2 instance</p> <ol> <li>Keypair - The key pair you use to connect to your instance. For our case we used <code>keypair.pem</code></li> </ol> <p></p> <ol> <li>Local file - The path to the file you want to transfer. For example, <code>/home/Davenats/Peach.jpg</code></li> </ol> <p></p> <ol> <li>Username - The username of your EC2 instance. For Amazon Linux, it is <code>ec2-user</code>.</li> <li>Public DNS - The Public DNS of your instance. You can find this in the EC2 Console.</li> </ol> <p>You can find these both in here</p> <p> </p> <ol> <li>Remote directory - The path to the directory on your instance where you want to store the file. For example, <code>:</code> </li> </ol> <p>We will not use /var/www/html as the directory to store the file as it needs root access to write files in that directory. Instead, we will use the home directory of the ec2-user.</p> <p>Completing this we have</p> <pre><code>scp -i keypair.pem Peach.jpg ec2-user@ec2-13-229-248-87.ap-southeast-1.compute.amazonaws.com:\n</code></pre> <p></p> <p>Lets verify if the file is transferred to the ec2 instance</p> <p></p> <p>We will now transfer the file from the home directory of the ec2-user to the /var/www/html directory. Where the apache server can access the file.</p> <pre><code>sudo mv /home/ec2-user/Peach.jpg /var/www/html/\n</code></pre> <p></p> <p>Verify if the file is transferred to the /var/www/html directory</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/09%20-%20Adding%20files%20to%20an%20instance/#cleanup","title":"Cleanup","text":"<ul> <li>Remember to delete the IAM role and S3 bucket if you no longer need them to avoid unnecessary charges.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/","title":"What is AMI and Images?","text":"<p>An Amazon Machine Image (AMI) is an image that provides the software that is required to set up and boot an Amazon EC2 instance. Each AMI also contains a block device mapping that specifies the block devices to attach to the instances that you launch. You must specify an AMI when you launch an instance. The AMI must be compatible with the instance type that you chose for your instance. You can use an AMI provided by AWS, a public AMI, an AMI that someone else shared with you, or an AMI that you purchased from the AWS Marketplace.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#an-ami-is-specific-to-the-following","title":"An AMI is specific to the following:","text":"<ul> <li> <p>Region   AMIs are tied to a specific AWS region (ie. ap-southeast-1) and are only available for launching instances in that region. You cannot directly use an AMI from one region in another region without copying it over.</p> </li> <li> <p>Operating system   An AMI is specific to the operating system that is installed on the root volume of the instance. This includes both Linux distributions (e.g., Amazon Linux, Ubuntu, Red Hat Enterprise Linux) and Windows Server AMIs.</p> </li> <li> <p>Processor architecture   AMIs are tied to specific processor architectures, such as x86 (64-bit, Intel/AMD architecture) or ARM (64-bit, AWS Graviton architecture). Instances launched from an AMI must be compatible with the processor architecture of the underlying hardware.</p> </li> <li> <p>Root device type   AMIs are either EBS-backed or instance store-backed, and the type of root device affects how the instance stores and retains data.</p> </li> <li>EBS-backed AMI: The root device is an Amazon EBS volume, which allows for persistent storage, meaning data remains even if the instance is stopped.</li> <li> <p>Instance store-backed AMI: The root device is an instance store volume, which is ephemeral, meaning data is lost when the instance stops or terminates.</p> </li> <li> <p>Virtualization type   AMIs support two types of virtualization: HVM (Hardware Virtual Machine) and PV (Paravirtual).</p> </li> <li>HVM: Instances launched from HVM AMIs are fully virtualized and take advantage of hardware-level features like enhanced networking, GPU access, and more. These instances are compatible with modern EC2 instance types.</li> <li>PV: PV instances use paravirtualization, which is an older virtualization method that has lower performance compared to HVM. PV instances do not have access to the same hardware-level features as HVM.</li> </ul> <p></p> <p>AMIs are the foundation for launching EC2 instances, and they provide a quick and efficient way to launch instances with pre-configured software and settings. This is throua a process called Image Builder. By creating custom AMIs, you can capture the configuration of an instance and use it to launch identical instances in the future.</p> <p>You can launch multiple instances from a single AMI when you require multiple instances with the same configuration. </p> <p>Image Builder is offered at no cost, other than the cost of the underlying AWS resources used to create store ang share the images.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#creating-a-pre-built-ami-from-an-instance","title":"Creating a Pre-built AMI from an Instance","text":"<p>Now, we will try to create a pre-built AMI with the image captured from our instance. This AMI already had the downloaded web server, static HTML, and any files uploaded in our server.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#steps-to-create-an-image-of-your-instance","title":"Steps to Create an Image of Your Instance","text":"<ol> <li>Go back to the instance page.</li> <li>Right-click on the instance ID.</li> <li>Navigate to Image and templates &gt; Create Image.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#name-your-instance","title":"Name Your Instance","text":"<ul> <li>Save the image.</li> </ul> <p>As you save the image, you will see that a snapshot is also made. When you create an AMI from an EC2 instance, AWS takes snapshots of all attached EBS volumes, enabling you to launch new instances with the same configuration and data. These incremental snapshots allow for version control, making it easy to manage changes and revert to previous states as needed.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#check-the-state-of-your-ami","title":"Check the State of Your AMI","text":"<ul> <li>Go to AMI then check the state of your AMI by clicking the AMI ID.</li> </ul> <p>You have now successfully created an image of your instance. </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#creating-a-new-instance-from-your-image","title":"Creating a New Instance from Your Image","text":"<p>Let\u2019s try to create a new instance with our image.</p> <ol> <li>Start with clicking Launch Instance from AMI.</li> </ol> <p></p> <ol> <li>Just do name of instance - <code>&lt;AMI1&gt;</code>. For naming convention sake, this helps to properly track our AMIs.</li> </ol> <p></p> <p></p> <p>As you can see, the AMI is already set from the image we captured from the first instance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#assign-a-key-pair","title":"Assign a Key Pair","text":"<ul> <li>Select the security group we made from our first instance. This will ensure that the specific inbound rules are made for port 80 (HTTP), which will show our webpage in our public IPv4 address.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#review-the-summary-of-the-instance","title":"Review the Summary of the Instance","text":"<ul> <li>After all is done, launch the instance.</li> </ul> <p>Congratulations! You successfully made an instance from a captured image of an instance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#testing-the-instance-configuration","title":"Testing the Instance Configuration","text":"<p>Let\u2019s test if the instance has the same configuration as the first, including the Apache web server and the static HTML.</p> <ol> <li>Copy the IPv4 address.</li> <li>Search in the internet as <code>http://&lt;your IPv4 address&gt;</code>.</li> </ol> <p></p> <p></p> <p>As you can see, the webpage is the same as the first instance. This means that the image captured from the first instance was successfully created and launched as a new instance.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#creating-an-image-from-an-instance-using-aws-cli","title":"Creating an Image from an Instance using AWS CLI","text":"<ol> <li>Show all the instances in the region.</li> </ol> <pre><code>aws ec2 describe-instance-status --include-all-instances --output table\n</code></pre> <p>Copy the instance ID of the instance you want to create an image from.</p> <p></p> <p>In this case, we will use the instance ID of the first instance we created. Which for mine is <code>i-0a81ca23862089678</code>.</p> <ol> <li>Create an image from the instance.</li> </ol> <pre><code>aws ec2 create-image \\\n    --instance-id i-0a81ca23862089678 \\\n    --name \"alc-ec2-workshop-Image\" \\\n    --description \"An AMI of my web server instance\" \n</code></pre> <p></p> <ol> <li>List all the images in the region created by you.</li> </ol> <pre><code>aws ec2 describe-images --owners self\n</code></pre> <p></p> <ol> <li>Verify the existence of the image on the AWS Console.</li> </ol> <p></p> <ol> <li> <p>Create a new instance from the image.</p> </li> <li> <p>Use the Image ID of the image you created and follow this guide.</p> </li> </ol> <p>Launch the EC2 Instance</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#connecting-to-the-instance","title":"Connecting to the Instance","text":"<p>If you want to connect to the instance, you can do so by using the same steps as before.</p> <ol> <li>Copy the ssh command from the SSH Client.</li> </ol> <p></p> <ol> <li>Connect using the terminal. Paste the copied command and press enter.</li> </ol> <p></p> <p>What seems to be the problem? - An AMI provided by AWS, the Amazon Linux AMI, has a default user of <code>ec2-user</code>. When we create an image based on this instance, the new instance will also have the same default user. Based on the ssh command we copied:</p> <p></p> <ul> <li>The username become root, this is because when creating an image from an instance, the default user is not copied over on the console of the SSH Client Connect. This is why we need to change the username to <code>ec2-user</code>.</li> </ul> <p></p> <p>Lets do some minor edits on our Apache webpage. </p> <p>NOTE: This will be useful in the following sections. \\ - Go to the instance and edit the <code>index.html</code> file.</p> <pre><code>sudo -i\n</code></pre> <p> </p> <pre><code>vim var/www/html/index.html\n</code></pre> <p></p> <ul> <li>Let's add new details to the webpage.</li> </ul> <p>:</p> <p></p> <p>save and exit file</p> <pre><code>:wq\n</code></pre> <ul> <li>Verify the changes by refreshing the webpage.</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/10%20-%20Making%20an%20Image%20of%20the%20instance/#cleanup","title":"Cleanup:","text":"<ul> <li>Remember to remove remove the image and the instances to avoid unnecessary charges.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/","title":"Elastic IP Address","text":"<p>An Elastic IP address (EIP) is a static, public IPv4 address in AWS, designed for the dynamic nature of cloud computing. EIPs allow users to manage resilient public endpoints in cloud infrastructure, offering flexibility in instance management and failover.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#key-features-and-benefits-of-elastic-ips","title":"Key Features and Benefits of Elastic IPs","text":"<ol> <li>Instance Failover: If an EC2 instance fails, EIPs can be quickly reassigned to another instance in the same VPC, maintaining a consistent public endpoint and reducing downtime.</li> <li>Flexible Traffic Management: EIPs can be programmatically associated or disassociated with instances to direct traffic as business needs evolve.</li> </ol> <ol> <li>Persistent Public Endpoint: EIPs provide stable identifiers for resources, which is helpful when configuring DNS records or firewall rules, ensuring reliable connectivity.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#important-considerations","title":"Important Considerations","text":"<ul> <li>Single Association: Each EIP can be attached to one instance or network interface at a time. However, it can be moved to another as needed.  </li> <li>Automatic IP Release: Associating an EIP with an instance's primary network interface (eth0) releases its existing public IPv4 address back to AWS.  </li> <li>IPv4 Limitation: AWS limits users to five Elastic IPs per region; using a NAT device is recommended to conserve them.  </li> <li>IPv6 Support: Currently, EIPs support only IPv4, not IPv6.  </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#security-and-access","title":"Security and Access","text":"<p>EIPs are accessible from the internet when allowed by the instance\u2019s security groups and network ACLs. For returning traffic, an internet gateway is required within the VPC.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#cost-and-tagging","title":"Cost and Tagging","text":"<p>Elastic IPs incur charges when not associated with a running instance. Tags can be applied to EIPs for tracking usage costs in AWS Cost Explorer: - Active IP Costs: Costs can be tracked under <code>PublicIPv4InUseAddress</code>. - Idle IP Costs: EIPs attached to stopped instances are considered idle and can be tracked under <code>PublicIPv4IdleAddress</code>. AWS charges around $0.005 per hour (approximately $3.60 per month) for each Elastic IP address that is allocated but not associated with a running instance. - Additional Elastic IPs: AWS allows one Elastic IP address to be associated with a running instance at no charge, but additional Elastic IPs associated with the same instance incur a cost of about $0.005 per hour. - IP Remapping: Frequent remapping of Elastic IPs (i.e., more than 100 times per month) can incur additional costs.  </p> <p>Note: Tags must be activated for cost tracking in AWS Cost Explorer, and it may take up to 24 hours for the tags to appear in the cost allocation tags page.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#regional-availability","title":"Regional Availability","text":"<p>Elastic IP addresses are regional, and users can select a network border group to limit CIDR blocks to a specific region, optimizing latency and availability.</p> <p>Classless Inter-Domain Routing (CIDR) is an IP address allocation method that improves data routing efficiency on the internet.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/11%20-%20Elastic%20IP/#bring-your-own-ip-byoip","title":"Bring Your Own IP (BYOIP)","text":"<p>AWS allows users to bring their own IP addresses to EIPs for specific use cases. See the AWS documentation on BYOIP for details.</p> <p>Elastic IPs provide a robust solution for maintaining stable and resilient cloud-based infrastructure, helping AWS users dynamically adapt to evolving networking needs.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/","title":"Setting Up an Elastic IP","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing EC2 instance to associate the Elastic IP with</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#steps-to-set-up-an-elastic-ip","title":"Steps to Set Up an Elastic IP","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-1-allocate-an-elastic-ip-address","title":"Step 1: Allocate an Elastic IP Address","text":"<ol> <li>In the left navigation pane, click on Elastic IPs under the Network &amp; Security section.</li> <li>Click the Allocate Elastic IP address button.</li> </ol> <ol> <li>Click Allocate. You will see a confirmation message, and your new Elastic IP will be displayed.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-11-allocate-an-elastic-ip-address-using-aws-cli","title":"Step 1.1: Allocate an Elastic IP Address using AWS CLI","text":"<p>You can also allocate an Elastic IP address using the AWS CLI. Run the following command:</p> <pre><code>aws ec2 allocate-address --domain vpc\n</code></pre> <p></p> <p>This command will return the details of the newly allocated Elastic IP address. Copy the Allocation ID for the next step. Mine is <code>eipalloc-04f8825b6e3fa5796</code></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-2-associate-the-elastic-ip-with-an-ec2-instance","title":"Step 2: Associate the Elastic IP with an EC2 Instance","text":"<ol> <li>Select the newly allocated Elastic IP from the list.</li> </ol> <ol> <li>Choose Associate Elastic IP address.</li> </ol> <ol> <li>In the Instance field, start typing the ID or name of your EC2 instance and select it from the dropdown.</li> </ol> <ol> <li>Leave the Private IP address field as default unless you have specific configurations.</li> <li>Click Associate.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-21-associate-the-elastic-ip-with-an-ec2-instance-using-aws-cli","title":"Step 2.1: Associate the Elastic IP with an EC2 Instance using AWS CLI","text":"<p>You can also associate the Elastic IP address with an EC2 instance using the AWS CLI. Run the following command:</p> <ol> <li>Lets first check the instance ID of the instance we want to associate the Elastic IP with.</li> </ol> <pre><code>aws ec2 describe-instance-status --include-all-instances --output table\n</code></pre> <p></p> <p>Copy the instance ID of the instance you want to associate the Elastic IP with.  </p> <ol> <li>With the instance ID and the allocation ID, run the following command:</li> </ol> <pre><code>aws ec2 associate-address \\\n    --instance-id &lt;instance-id&gt; \\\n    --allocation-id &lt;allocation-id&gt;\n</code></pre> <p></p> <ol> <li>Lets check the Elastic IP address to see if it has been associated with the instance.</li> </ol> <pre><code>aws ec2 describe-addresses \n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-3-verify-the-association","title":"Step 3: Verify the Association","text":"<ol> <li>Navigate back to the Instances section in the EC2 dashboard.</li> <li>Select your EC2 instance and scroll down to the Description tab.</li> <li>Verify that the Elastic IP is now listed under the instance's public IP address.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-4-test-the-elastic-ip-using-web-browser","title":"Step 4: Test the Elastic IP using web browser.","text":"<ol> <li>Open a web browser.</li> <li>Enter the Elastic IP address in the address bar.</li> <li>If a web server is running on your instance, you should see the expected response.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#step-5-testing-the-elastic-ip-by-comparing-it-with-the-public-ip","title":"Step 5: Testing the Elastic IP by comparing it with the Public IP","text":"<ul> <li>The public IP address of an EC2 instance can change when the instance is stopped and started, while an Elastic IP remains the same until you release it.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#testing-the-public-ip","title":"Testing the Public IP","text":"<ol> <li> <p>Find an instance with a public IP address. (without an Elastic IP)</p> </li> <li> <p>Check the public IP address of the instance.</p> </li> </ol> <p></p> <p><code>47.129.192.44</code> is the public IP address of the instance.</p> <ol> <li>Stop the instance.</li> </ol> <p></p> <ol> <li>Start it again and watch the public IP address change.</li> </ol> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#testing-the-elastic-ip","title":"Testing the Elastic IP","text":"<ol> <li>Find the instance with an Elastic IP address.</li> </ol> <ol> <li>Stop the instance.</li> </ol> <ol> <li>Start it again and check the Elastic IP address. It should remain the same.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#cleanup","title":"Cleanup","text":"<ol> <li>If you no longer need the Elastic IP, go back to the Elastic IPs section.</li> <li>Select the Elastic IP and choose Disassociate Elastic IP address from the Actions dropdown.</li> </ol> <ol> <li>Release the Elastic IP by selecting Release Elastic IP address from the Actions dropdown.</li> </ol> <ol> <li>Confirm the release.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#clean-up-using-aws-cli","title":"Clean up using AWS CLI","text":"<ol> <li> <p>To disassociate the Elastic IP from the instance later, you can use the disassociate-address command:</p> </li> <li> <p>You first need to get the AssociatedID using the following command:</p> </li> </ol> <p><pre><code>aws ec2 describe-addresses\n</code></pre> </p> <p>Using the copied association ID, run the following command:</p> <pre><code>aws ec2 disassociate-address --association-id &lt;association-id&gt;\n</code></pre> <p></p> <p>Checking the Elastic IP address again, you will see that it is no longer associated with the instance.</p> <pre><code>aws ec2 describe-addresses \n</code></pre> <p></p> <ol> <li>If you want to release the Elastic IP when you no longer need it, use with the allocation-id earlier:</li> </ol> <pre><code>aws ec2 release-address --allocation-id &lt;allocation-id&gt;\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/12%20-%20Setting%20up%20an%20elastic%20ip/#additional-resources","title":"Additional Resources","text":"<ul> <li>Elastic IP Addresses</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/","title":"Storage in EC2","text":"<p>Amazon EC2 provides you with flexible, cost effective, and easy-to-use data storage options for your instances. Each option has a unique combination of performance and durability. These storage options can be used independently or in combination to suit your requirements.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#block-storage","title":"Block Storage","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-ebs","title":"Amazon EBS","text":"<p>Amazon EBS provides durable, block-level storage volumes that you can attach and detach from your instances. </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#instance-store-temporary-block-storage-for-ec2-instances","title":"Instance store temporary block storage for EC2 instances","text":"<p>Instance store provides temporary block-level storage for instances. The number, size, and type of instance store volumes are determined by the instance type and instance size.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#object-storage","title":"Object storage","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-s3","title":"Amazon S3","text":"<p>Amazon S3 provides access to reliable and inexpensive data storage infrastructure. It is designed to make web-scale computing easier by enabling you to store and retrieve any amount of data, at any time, from within Amazon EC2 or anywhere on the web.For example, you can use Amazon S3 to store backup copies of your data and applications. Amazon EC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#file-storage","title":"File Storage","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-efs-linux-instances-only","title":"Amazon EFS (Linux instances only)","text":"<p>Amazon EFS provides scalable file storage for use with Amazon EC2. You can create an EFS file system and configure your instances to mount the file system. You can use an EFS file system as a common data source for workloads and applications running on multiple instances.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-fsx","title":"Amazon FSx","text":"<ul> <li>With Amazon FSx, you can launch, run, and scale feature-rich, high-performance file systems in the cloud. Amazon FSx is a fully-managed service that supports a wide range of workloads.  You can choose between these widely-used file systems: Lustre, NetApp ONTAP, OpenZFS, and Windows File Server.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#file-caching","title":"File Caching","text":"<p>Amazon File Cache provides temporary, high-performance cache on AWS for processing file data. The cache provides read and write data access to compute workloads on Amazon EC2 with sub-millisecond latencies, up to hundreds of GB/s of throughput, and up to millions of IOPS.</p> <p>The following figure shows the relationship between these storage options and your instance.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#ebs","title":"EBS","text":"<p>Amazon Elastic Block Store (Amazon EBS) provides scalable, high-performance block storage resources that can be used with Amazon Elastic Compute Cloud (Amazon EC2) instances. With Amazon Elastic Block Store, you can create and manage the following block storage resources:</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-ebs-volumes","title":"Amazon EBS volumes","text":"<p>These are storage volumes that you attach to Amazon EC2 instances. After you attach a volume to an instance, you can use it in the same way you would use a local hard drive attached to a computer, for example to store files or to install applications.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-ebs-snapshots","title":"Amazon EBS snapshots","text":"<p>These are point-in-time backups of Amazon EBS volumes that persist independently from the volume itself. You can create snapshots to back up the data on your Amazon EBS volumes. You can then restore new volumes from those snapshots at any time.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#accessing-amazon-ebs","title":"Accessing Amazon EBS","text":"<p>You can create and manage your Amazon EBS resources using the following interfaces: - AWS Command Line Interface - AWS Tools for PowerShell - AWS CloudFormation - Amazon EC2 Query API - AWS SDKs</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#pricing","title":"Pricing","text":"<p>Pricing Calculator - https://calculator.aws/#/createCalculator/EBS </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-ebs-provides-the-following-volume-types","title":"Amazon EBS provides the following volume types:","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#general-purpose-ssd-gp2-and-gp3-and-provisioned-iops-ssd-io1-and-io2","title":"General Purpose SSD (gp2 and gp3) and Provisioned IOPS SSD (io1 and io2).","text":"<ul> <li>SSD-backed volumes are optimized for transactional workloads involving frequent read/write operations with small I/O size, where the dominant performance attribute is IOPS.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#throughput-optimized-hdd-st1-cold-hdd-sc1","title":"Throughput Optimized HDD (st1), Cold HDD (sc1)","text":"<ul> <li>HDD-backed volumes are optimized for large streaming workloads where the dominant performance attribute is throughput. HDD volume types include Throughput Optimized HDD and Cold HDD.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#magnetic-standard","title":"Magnetic (standard).","text":"<ul> <li>Magnetic (standard) volumes are previous generation volumes that are backed by magnetic drives. They are suited for workloads with small datasets where data is accessed infrequently and performance is not of primary importance. </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#basic-steps","title":"Basic Steps","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#features-and-benefits-of-amazon-ebs-volumes","title":"Features and benefits of Amazon EBS volumes","text":"<ul> <li> <p>Data availability. When you create an EBS volume, it is automatically replicated within its Availability Zone to prevent data loss due to failure of any single hardware component.</p> </li> <li> <p>Data persistence. An EBS volume is off-instance storage that can persist independently from the life of an instance. You continue to pay for the volume usage as long as the data persists.</p> </li> <li> <p>Data encryption. For simplified data encryption, you can create encrypted EBS volumes with the Amazon EBS encryption feature. All EBS volume types support encryption. You can use encrypted EBS volumes to meet a wide range of data-at-rest encryption requirements for regulated/audited data and applications.</p> </li> <li> <p>Data security. </p> </li> <li> <p>Snapshots. Amazon EBS provides the ability to create snapshots (backups) of any EBS volume and write a copy of the data in the volume to Amazon S3, where it is stored redundantly in multiple Availability Zones. </p> </li> <li> <p>The volume does not need to be attached to a running instance in order to take a snapshot. As you continue to write data to a volume, you can periodically create a snapshot of the volume to use as a baseline for new volumes. </p> </li> <li> <p>These snapshots can be used to create multiple new EBS volumes or move volumes across Availability Zones. Snapshots of encrypted EBS volumes are automatically encrypted.</p> </li> <li> <p>When you create a new volume from a snapshot, it's an exact copy of the original volume at the time the snapshot was taken.</p> </li> <li> <p>Snapshots are incremental backups, meaning that only the blocks on the volume that have changed after your most recent snapshot are saved. If you have a volume with 100 GiB of data, but only 5 GiB of data have changed since your last snapshot, only the 5 GiB of modified data is written to Amazon S3. </p> </li> <li> <p>Even though snapshots are saved incrementally, the snapshot deletion process is designed so that you need to retain only the most recent</p> </li> <li> <p>Flexibility. EBS volumes support live configuration changes while in production. You can modify volume type, volume size, and IOPS capacity without service interruptions.</p> </li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#volume-lifecycle-attach-an-ebs-volume-to-multiple-ec2-instances-using-multi-attach","title":"Volume Lifecycle: Attach an EBS volume to multiple EC2 instances using Multi-Attach","text":"<p>Amazon EBS Multi-Attach enables you to attach a single Provisioned IOPS SSD (io1 or io2) volume to multiple instances that are in the same Availability Zone. You can attach multiple Multi-Attach enabled volumes to an instance or set of instances.</p> <ul> <li>Multi-Attach makes it easier for you to achieve higher application availability in applications that manage concurrent write operations.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#pricing-and-billing","title":"Pricing and billing","text":"<ul> <li>There are no additional charges for using Amazon EBS Multi-Attach. You are billed the standard charges that apply to Provisioned IOPS SSD (io1 and io2) volumes.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#migrate-amazon-ebs-volumes-from-gp2-to-gp3","title":"Migrate Amazon EBS volumes from gp2 to gp3","text":"<p>The standard across many AWS services (including Amazon EC2) is gp2. The performance is closely coupled with the size of the volume. For every 1 GB of capacity, gp2 volumes get 3 IOPS of performance. That is, a 2,000 GB gp2 volume is capable of 6,000 IOPS.  The third generation of general purpose SSDs, called gp3. For gp3 volumes, performance can be customized independently from the storage capacity. This enables even small capacity volumes to achieve performance capabilities up to 16,000 IOPS and 1,000 Mb/s throughput.</p> <p>Note: IOPS are a unit of measure representing input/output operations per second.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#cost-impact","title":"Cost Impact","text":"<ul> <li>For gp2 volumes, pricing is based on provisioned capacity at $0.10 per GiB-month. For gp3 volumes, have a capacity price at $0.08 per GiB-month (20 percent less expensive than gp2) and separate costs for IOPS at $0.005 per provisioned IOPS-month over 3,000 and $0.04 per provisioned MiBs-month over 125 MiBs for throughput.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#modify-amazon-ebs-snapshots","title":"Modify Amazon EBS snapshots","text":"<p>Deleting EBS volumes and managing the retention and archiving of snapshots is an important aspect to control costs from the start. You can back up the data on your EBS volumes to Amazon Simple Storage Service (Amazon S3) by taking point-in-time snapshots. </p> <ul> <li> <p>Snapshots are incremental backups, so they save only the blocks on the devices that changed after your most recent snapshot. This minimizes the time required to create the snapshot and saves on storage costs by not duplicating data.</p> </li> <li> <p>Each snapshot contains all the information that's required to restore your data (from when the snapshot was created) to a new EBS volume.</p> </li> </ul> <p>Charges for EBS snapshots are calculated by the gigabyte-month. You're billed for how large the snapshot is and how long you keep the snapshot. Pricing varies depending on the storage tier. </p> <ul> <li>Standard tier \u2013 You have a volume that's storing 100 GB of data. You're billed for the full 100 GB of data for the first snapshot (snap A). At the time of the next snapshot (snap B), you have 105 GB of data. You're then billed for only the additional 5 GB of storage for incremental snap B.</li> <li>Archive tier \u2013 You archive snap B. The snapshot is then moved to the Archive tier, and you're billed for the full 105 GB snapshot block.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#cost-impact_1","title":"Cost Impact","text":"<ul> <li>Charges for EBS volumes and snapshots are managed separately. The following table compares the standard and archive tiers per month at just 50 TB of usage. Even at this lower scale it's still thousands of dollars of savings annually.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#delete-unattached-amazon-ebs-volumes","title":"Delete unattached Amazon EBS volumes","text":"<p>Unattached (orphaned) EBS volumes can lead to unnecessary storage costs in your AWS environment. - It's a best practice to have a process in place to continually review the usage of EBS volumes.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#cost-impact_2","title":"Cost impact","text":"<ul> <li>Unattached EBS volumes, also referred to as unused or orphaned volumes, incur the same charges as attached volumes based on the provisioned storage size and storage type. Although it's only 0.10 per GB-month, it's crucial to recognize that the accumulation of unused EBS volumes can result in significant costs over time.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#cost-optimization-recommendations","title":"Cost optimization recommendations","text":"<p>You can use AWS to easily automate the deletion of unattached EBS volumes. </p> <ul> <li> <p>For example, use AWS Lambda, AWS Config, Amazon CloudWatch, and AWS Systems Manager to define criteria for deleting unattached volumes based on age, tags, and other specifications. </p> </li> <li> <p>You can also use these AWS services to automate the cleanup process at scale.</p> </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#amazon-ebs-volume-lifecycle","title":"Amazon EBS Volume Lifecycle","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#elastic-file-system-efs","title":"Elastic File System (EFS)","text":"<p>Amazon EFS provides scalable file storage for use with Amazon EC2. You can use an EFS file system as a common data source for workloads and applications running on multiple instances. </p> <ul> <li> <p>EFS is a fully managed, scalable, elastic file storage service that can be shared across multiple EC2 instances.</p> </li> <li> <p>It is designed to provide a simple, scalable, and fully managed file storage solution for use with AWS Cloud services and on-premises resources.</p> </li> </ul> <p>How it works: Amazon Elastic File System (Amazon EFS) automatically grows and shrinks as you add and remove files with no need for management or provisioning.</p> <p></p> <p>Features: - File System Storage: EFS provides a file system interface and file system semantics, meaning you can access files in a directory structure (like a traditional file system).</p> <ul> <li> <p>Shared Access: Multiple EC2 instances can access the same EFS file system simultaneously, making it ideal for applications that require shared access to files, such as content management systems, web servers, and data analytics.</p> </li> <li> <p>Automatic Scaling: EFS automatically scales up or down as files are added or removed, so you only pay for what you use.</p> </li> <li> <p>Performance Modes: Supports two performance modes (General Purpose and Max I/O) for various performance requirements.</p> </li> <li> <p>Durability: Data is redundantly stored across multiple Availability Zones, ensuring high availability and durability.</p> </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#ebs-lifecycle-manager","title":"EBS Lifecycle Manager","text":"<p>You can use Amazon Data Lifecycle Manager to automate the creation, retention, and deletion of EBS snapshots and EBS-backed AMIs. </p> <ul> <li>EBS Data Lifecycle Manager (DLM) is an automation tool that helps manage the lifecycle of your EBS volumes and snapshots. It allows you to define policies that automatically create, retain, and delete EBS snapshots and volumes according to your specified criteria. Quotas Your AWS account has the following quotas related to Amazon Data Lifecycle Manager:</li> </ul> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/13%20-%20Storage%20in%20EC2/#features","title":"Features:","text":"<ul> <li> <p>Automation: Set up rules to automatically create snapshots or delete old ones based on age or other factors.</p> </li> <li> <p>Cost Management: Ensure that you only keep the snapshots or volumes you need, helping you optimize storage costs.</p> </li> <li> <p>Compliance: Retain snapshots according to your compliance or data retention requirements.</p> </li> <li> <p>Retention Policies: Specify how many snapshots to keep, and automatically delete older ones when a new one is created.</p> </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/14%20-%20Expanding%20EBS%20Volume/","title":"Expanding an EBS Volume","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/14%20-%20Expanding%20EBS%20Volume/#step-1-modify-the-ebs-volume-in-the-aws-console","title":"Step 1: Modify the EBS Volume in the AWS Console","text":"<ol> <li>Select the instance where we want to expand the EBS volume.</li> </ol> <ol> <li>Scroll down to the storage section and click on the EBS volume.</li> </ol> <ol> <li>Click the EBS volume ID to view its details.</li> </ol> <ol> <li>Click the Modify button.</li> </ol> <ol> <li>Moify the volum size from <code>8 GiB</code> to <code>12 GiB</code> and click Modify.</li> </ol> <ol> <li>Wait for Update:</li> <li>AWS will modify the volume in the background. You can monitor the State in the Volumes section until it shows as available.</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/14%20-%20Expanding%20EBS%20Volume/#step-11-modify-the-ebs-volume-using-aws-cli","title":"Step 1.1: Modify the EBS Volume Using AWS CLI","text":"<ol> <li>Check the Volume ID:</li> <li>Run the following command to list all the volumes in the region:</li> </ol> <pre><code>aws ec2 describe-volumes\n</code></pre> <ul> <li> <p>Copy the <code>VolumeId</code> of the volume you want to modify.</p> </li> <li> <p>Modify the Volume:</p> </li> <li>Run the following command to modify the volume size. For example we want to modify the volume with <code>VolumeId</code> <code>vol-0a8a678e064948d77</code> to <code>16 GiB</code>:</li> </ul> <pre><code>aws ec2 modify-volume \\\n    --volume-id &lt;VolumeId&gt; \\\n    --size 16\n</code></pre> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/14%20-%20Expanding%20EBS%20Volume/#step-2-reflect-the-changes-on-the-ec2-instance-using-aws-cli","title":"Step 2: Reflect the Changes on the EC2 Instance Using AWS CLI","text":"<ol> <li>Verify the New Size on the Instance:</li> <li>SSH into your EC2 instance.</li> </ol> <ul> <li> <p>Check if the OS recognizes the new volume size:</p> <pre><code>lsblk\n</code></pre> </li> </ul> <p></p> <ul> <li> <p>Lets use to see the file system type:</p> <p><pre><code>lsblk -f \n</code></pre> </p> </li> </ul> <p>From the output, we can see that the file system type is <code>xfs</code>.</p> <ol> <li>Resize the partition</li> </ol> <p><pre><code>sudo growpart /dev/xvda 1\n</code></pre> </p> <p>This command will resize the storage partition to the maximum size available.</p> <ol> <li>Expand the File System:</li> <li> <p>Run the following commands based on the file system type.</p> </li> <li> <p>For ext2/ext3/ext4 file systems:      <pre><code>sudo resize2fs /dev/xvdf\n</code></pre></p> </li> <li> <p>For XFS file systems, the same one that we had in the instance:      <pre><code>sudo xfs_growfs -d /mount/point\n</code></pre></p> </li> <li> <p>Replace <code>/dev/xvdf</code> and <code>/mount/point</code> with your specific device name or mount point as listed by <code>lsblk</code>. From the output of <code>lsblk</code>, you can see the mount point of the volume. Use that mount point in the command. </p> </li> </ol> <p></p> <ul> <li>Type in the command that suits your file system and press <code>Enter</code>. We have a XFS file system in this instance and <code>/</code> is the mount point.    The command is:    <pre><code>sudo xfs_growfs -d /\n</code></pre></li> </ul> <p></p> <ol> <li>Verify Expansion:</li> <li>Run <code>df -h</code> to ensure the file system reflects the new volume size.</li> </ol> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/14%20-%20Expanding%20EBS%20Volume/#we-have-successfully-expanded-the-ebs-volume-and-the-file-system-on-the-ec2-instance","title":"We have successfully expanded the EBS volume and the file system on the EC2 instance.","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/","title":"What is Elastic Load Balancing?","text":"<p>Elastic Load Balancing distributes incoming traffic among different targets, it includes EC2 instances, containers, and IP addresses, in one or more Availability Zones. It checks the health of the registered targets and directs traffic simply to the healthy targets. Elastic Load Balancing automatically adjusts load balancer capacity in response to fluctuations in incoming traffic.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#benefitssignificance-of-elastic-load-balancing","title":"BENEFITS/SIGNIFICANCE of Elastic Load Balancing","text":"<ul> <li>Increased Availability: By dividing traffic over multiple EC2 instances, it ensures high availability while reducing downtime during peak demand.</li> <li>Fault Tolerance: It proactively detects unhealthy instances and reroutes traffic to improve application fault tolerance.</li> <li>Scalability: It dynamically changes resources based on traffic when it is used with Auto Scaling providing peak performance without any user intervention.</li> <li>Improved Performance: The load is divided evenly across instances to avoid delays and ensure constant response times.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#types-of-load-balancers","title":"Types of Load Balancers","text":"<p>AWS offers different types of load balancers for specific use cases. There are three main types: Application Load Balancer, Network Load Balancer, and Gateway Load Balancer.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#1-application-load-balancer-alb","title":"1. Application Load Balancer (ALB)","text":"<ul> <li>Use case: Best for web applications.</li> <li>Layer: Operates at Layer 7 (Application Layer).</li> <li>How it works: The ALB routes traffic based on the content of the request, such as URL paths or HTTP headers. This makes it ideal for applications that need intelligent routing, such as microservices or container-based apps.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#2-network-load-balancer-nlb","title":"2. Network load balancer (NLB)","text":"<ul> <li>Use case: Ideal for high-performance applications requiring TCP/UDP traffic or low latency.</li> <li>Layer: It operates at Layer 4 (Transport Layer).</li> <li>How it works: The NLB directs traffic using IP addresses and ports. It is intended for high performance and can handle millions of requests per second with little latency. It works well for apps that do not need to assess the request's content.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#3-gateway-load-balancer-gwlb","title":"3. Gateway Load Balancer (GWLB)","text":"<ul> <li>Use case: Ideal for combining virtual appliances from third parties, such as intrusion detection systems (IDS), firewalls, and other security appliances.</li> <li>Layer: Utilizes the Network Layer, or Layer 3.</li> <li>How it works: It integrates virtual appliances into the network by placing the GWLB in between network and the appliances. Traffic is sent to the appliances for logging, filtering, or inspection, and then it is forwarded back to the original destination.</li> </ul> <p>The main differences between load balancer types - ALB: Works best for HTTP/HTTPS applications that require traffic routing according to the content of the requests. - NLB: Optimal for applications requiring high speed and low latency while managing high TCP/UDP traffic volumes. - GLB: Ideal for adding surveillance or security appliances, such as firewalls and threat detection systems to the network.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#components-of-a-basic-application-load-balancer","title":"Components of a basic Application Load Balancer","text":"<ul> <li>Load balancer</li> <li>Listener</li> <li>Target Group</li> </ul> <p>Listener: A listener is a process that monitors the set protocol and port for connection requests. It needs at least one listener before using application load balancer. If a load balancer does not have listeners, it will be unable to receive client traffic. The load balancer routes requests to the register targets, such as EC2 instances, depending on the rules provided for listeners.</p> <p>Target Groups for Application Load Balancers: Application load balancers (ALBs) use target groups to direct requests to certain resources, such as EC2 instances. Every target group has a defined protocol and port assigned to it. By controlling the distribution of requests across the resources, target groups contribute to effective and balanced traffic routing. It maximizes the dependability and performance of the application by properly establishing them.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#how-does-application-load-balancer-work","title":"How does application load balancer work?","text":"<ol> <li> <p>A client/user sends a request to the load balancer, which serves as the application's main point of access.</p> </li> <li> <p>Initially, the listener on the load balancer checks the incoming request, using the protocol and port that was configured.</p> </li> <li> <p>The listener then prioritizes its rules to decide which one fulfills the request's requirements.</p> </li> <li> <p>Following that, the load balancer picks a target group to route the request to based on the rule action.</p> </li> <li> <p>Within the defined target group, the load balancer selects a specific target using a routing strategy. Round robin is the default routing method, however it may alternatively select the routing algorithm that has the fewest outstanding requests.</p> </li> <li> <p>The load balancer then runs a health check to confirm that the specified target is working.</p> </li> <li> <p>Afterward, the load balancer forwards the request to the specified healthy target. If the target is considered unhealthy, the load balancer selects another healthy target.</p> </li> <li> <p>Lastly, the target processes the request and sends a response to the load balancer, which forwards it to the client.</p> </li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#key-features","title":"Key Features","text":"<p>Rules are used to indicate the target group to deliver traffic depending on predefined circumstances for the load balancer's listener. Making routing effective and flexible possible.</p> <p>Each target group may register a target with more than one load balancer, but each load balancer may only be connected to a single target group.</p> <p>Routing Requests: Traffic can be directed to one or more registered targets by each target group. Various target groups can be made for various kinds of requests, including:</p> <ul> <li>General requests</li> <li>Microservice requests</li> <li>Health Checks</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#why-test-load-balancer-instances","title":"Why test load balancer instances?","text":"<p>A load balancer is tested to ensure that traffic is distributed across servers correctly, problems are managed in the case of a server failure and configurations such as routing and health checks are up to order.</p> <p>Elastic Load Balancer automatically stops forwarding requests to an unhealthy instance when it fails health checks. This keeps the application from experiencing problems or delays by guaranteeing that traffic is only sent to instances that are stable and operating. The load balancer returns sending traffic to the instance when it passes health checks again.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#monitoring-health-of-each-instance","title":"Monitoring Health of Each Instance","text":"<p>- An Elastic Load Balancer only routes traffic to healthy targets, such as EC2 instances, containers, IP addresses, microservices, Lambda functions, and appliances.</p> <p>Health Checks: These checks are usually set up to display specific error codes when something goes wrong and to monitor every service operating behind the load balancer. This aids in promptly locating and resolving problems.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#ec2-load-balancing-pricing","title":"EC2 Load Balancing Pricing","text":"<p>AWS charges for load balancers depending on two key factors: hours utilized and capacity units consumed.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#application-load-balancers-alb","title":"Application Load Balancers (ALB)","text":"<p>Hourly charge: Charged for each hour (or partial hour) while the load balancer is operational, regardless of the amount of traffic it manages.</p> <p>LCU (Load Balancer Capacity Unit): In addition to the hourly fee, it is charged according to the number of LCUs utilized every hour.</p> <p>The LCUs measure: - New connections (the number of new requests) - Active connections (ongoing traffic) - Data processed (total number of bytes transmitted).</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#network-load-balancer-nlb","title":"Network load balancer (NLB)","text":"<p>Hourly charge: Like ALB, it is charged for each hour (or partial hour) while the NLB is operational. NLCU (Network Load Balancer Capacity Unit): Charges vary depending on how many NLCUs are utilized per hour. NLCUs measure: - Bandwidth ( the amount of data transmitted) - New and active connections (the number of connections formed or maintained), - TLS termination (if the load balancer is handling encrypted connections).</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#gateway-load-balancergwlb","title":"Gateway Load Balancer(GWLB)","text":"<p>Hourly charge: charges for every hour (or partial hour) that the GWLB is operational.</p> <p>GLCU (Gateway Load Balancer Capacity Unit): Charges depend on the number of GLCUs used per hour, which measure traffic passing through the gateway.</p> <p>Gateway Load Balancer Endpoint: A separate service used to securely exchange traffic across VPCs, and it is billed separately from the GWLB.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/15%20-%20Elastic%20Load%20Balancer/#aws-load-balancer-free-tier","title":"AWS Load balancer Free Tier","text":"<p>Use the AWS Free Tier to begin using elastic load balancing for free. New AWS users get 15 GB of data processing for Classic load balancers and 15 LCUs for Application load balancers upon signup, along with 750 hours per month split between Classic and Application load balancers.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/","title":"Configuring an Elastic Load Balancer with Multiple Instances","text":"<p>This part will walk you through the process of setting up an Elastic Load Balancer (ELB) with three EC2 instances that provide slightly different outputs. This setup will help demonstrate how load balancing works by distributing traffic across the instances.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to an AWS account</li> <li>Basic understanding of EC2 and Elastic Load Balancer</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#step-1-create-three-ec2-instances","title":"Step 1: Create Three EC2 Instances","text":"<p>We already had 2 instances so we only need to create one more.</p> <ol> <li>Launch EC2 Instances:</li> <li>Make another instance with the same configuration as the first two instances.</li> <li>Make minute changes to the instance to see the load balancer working</li> <li>For a guide, go back to the \"Link to creating an AMI page\"</li> </ol>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#step-2-create-a-target-group","title":"Step 2: Create a target group","text":"<ol> <li>Create Target Group:</li> <li>Create a new target group for the instances.</li> <li>Select \"Instance\" as the target type.</li> <li>Add all three instances to the target group.</li> </ol> <p>click <code>Include as pending below</code></p> <p></p> <p></p> <p>You have now created a target group with three instances. The next step is to create a load balancer and configure it to use this target group.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#step-2-configure-the-elastic-load-balancer","title":"Step 2: Configure the Elastic Load Balancer","text":"<ol> <li>Navigate to Load Balancers:</li> <li>In the EC2 Dashboard, click on \"Load Balancers\" under \"Load Balancing\".</li> </ol> <ol> <li>Create Load Balancer:</li> <li>Click on \"Create Load Balancer\" and select \"Application Load Balancer\".</li> </ol> <ol> <li>Configure Load Balancer:</li> <li>Name: Enter a the name <code>alc-ec2workshop-ALB</code></li> <li>Scheme: Select \"Internet-facing\".</li> </ol> <ul> <li>VPC and Subnets: Choose the same VPC and select all availability zones where your instances are located. </li> </ul> <pre><code> - To check the availability zone of your instances:\n - Go back to the instace page and check the availability zone of the instances\n</code></pre> <ol> <li>Select Security Group:</li> <li>Choose the security group that applies to all instances.</li> </ol> <ol> <li>Listeners and Routing:</li> <li> <p>Leave the default listener set to port 80 (HTTP).</p> </li> <li> <p>Configure Routing:</p> </li> <li>Select the target group you created earlier.</li> </ol> <p></p> <ol> <li>Launch the Load Balancer:</li> <li>Review the settings and click \"Create\".</li> </ol> <p></p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#step-3-test-the-load-balancer","title":"Step 3: Test the Load Balancer","text":"<ol> <li>Obtain Load Balancer DNS:</li> <li>Once the load balancer is created, obtain its DNS name from the Load Balancers section.</li> </ol> <ol> <li>Access the Load Balancer:</li> <li>Open a web browser and enter the DNS name of the load balancer.</li> <li>Refresh the page multiple times to see the different instance outputs:<ul> <li>Instance 1</li> </ul> </li> </ol> <pre><code> - Instance 2\n</code></pre> <pre><code> - Instance 3\n</code></pre>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#step-4-monitor-load-balancer-and-instances","title":"Step 4: Monitor Load Balancer and Instances","text":"<ol> <li>Check Target Group Health Status:</li> <li>Select the target group associated with your instances.</li> </ol> <ul> <li>Check the health status of each instance to ensure they are properly registered and healthy.</li> </ul> <p>Note: - If you want to attach a domain name to the load balancer, you can use Route 53 to create an alias record that points to the load balancer's DNS name.</p> <p>Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/16%20-%20Creating%20a%20load%20balancer/#cleanup","title":"Cleanup","text":"<ul> <li>Remove the load balancer and target group to avoid incurring additional costs if you no longer need them.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/","title":"Auto Scaling Groups","text":"<p>Amazon EC2 Auto Scaling helps you ensure that you have the correct number of Amazon EC2 instances available to handle the load for your application. You create collections of EC2 instances, called Auto Scaling groups.  - You can specify the minimum and maximum number of instances in each Auto Scaling group, and Amazon EC2 Auto Scaling ensures that your group never goes beyond this size. -  If you specify the desired capacity, either when you create the group or at any time thereafter, Amazon EC2 Auto Scaling ensures that your group has this many instances. - If you specify scaling policies, then Amazon EC2 Auto Scaling can launch or terminate instances as demand on your application increases or decreases.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#example","title":"Example","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#pricing-for-amazon-ec2-auto-scaling","title":"Pricing for Amazon EC2 Auto Scaling","text":"<p>There are no additional fees with Amazon EC2 Auto Scaling, so it's easy to try it out and see how it can benefit your AWS architecture. You only pay for the AWS resources (for example, EC2 instances, EBS volumes, and CloudWatch alarms) that you use.</p> <p>Work with Auto Scaling groups</p> <p>You can create, access, and manage your Auto Scaling groups using any of the following interfaces: - AWS Management Console  - AWS Command Line Interface (AWS CLI)  - AWS SDKs - Query API - AWS CloudFormation</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#create-a-launch-template-for-an-auto-scaling-group","title":"Create a launch template for an Auto Scaling group","text":"<p>Before you can create an Auto Scaling group using a launch template, you must create a launch template that contains the configuration information to launch an instance, including the ID of the Amazon Machine Image (AMI). To create new launch templates, use the following procedures.</p> <ul> <li>Create your launch template (console)</li> <li>Change the default network interface settings (console)</li> <li>Modify the storage configuration (console)</li> <li>Create a launch template from an existing instance (console)</li> <li>Related resources</li> <li>Limitations</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#create-auto-scaling-groups-using-launch-templates","title":"Create Auto Scaling groups using launch templates","text":"<p>If you have created a launch template, you can create an Auto Scaling group that uses a launch template as a configuration template for its EC2 instances. The launch template specifies information such as the AMI ID, instance type, key pair, security groups, and block device mapping for your instances. </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#create-auto-scaling-groups-using-launch-configurations","title":"Create Auto Scaling groups using launch configurations","text":"<p>If you have created a launch configuration or an EC2 instance, you can create an Auto Scaling group that uses a launch configuration as a configuration template for its EC2 instances. The launch configuration specifies information such as the AMI ID, instance type, key pair, security groups, and block device mapping for your instances. For information about creating launch configurations,</p> <p>The following describes how to create a launch configuration.After you create a launch configuration, you cannot modify it. Instead, you must create a new launch configuration.</p> <ul> <li>Create a launch configuration</li> <li>Configure the instance metadata options</li> <li>Create a launch configuration using an EC2 instance</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#choose-your-scaling-method","title":"Choose your scaling method","text":"<p>Amazon EC2 Auto Scaling provides several ways for you to scale your Auto Scaling group.</p> <p>Maintain a fixed number of instances - The default for an Auto Scaling group is to not have any attached scaling policies or scheduled actions, which causes it to maintain a fixed size. After you create your Auto Scaling group, it starts by launching enough instances to meet its desired capacity. </p> <ul> <li>If there are no scaling conditions attached to the group, it continues to maintain its desired capacity even if an instance becomes unhealthy. </li> </ul> <p>Amazon EC2 Auto Scaling monitors the health of each instance in your Auto Scaling group. When it finds that an instance has become unhealthy, it replaces it with a new instance. You can read a more in-depth description of this process in Health checks for instances in an Auto Scaling group.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#scale-manually","title":"Scale manually","text":"<ul> <li>Manual scaling is the most basic way to scale your Auto Scaling group. You can either update the desired capacity of the Auto Scaling group or terminate instances in the Auto Scaling group. </li> <li>Manual scaling is an alternative to auto scaling, especially if you want to make one-time capacity changes.</li> <li>After you manually scale your group, Amazon EC2 Auto Scaling resumes normal auto scaling activities based on the scaling policies and scheduled actions that you defined. For groups with default instance warmup enabled, any new instances go through a warmup period before they start contributing to the metrics used for auto scaling. This warmup period assists in stabilizing the group at the new capacity. </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#scale-based-on-a-schedule","title":"Scale based on a schedule","text":"<ul> <li>Scaling by schedule means that scaling actions are performed automatically as a function of date and time. </li> <li>This is useful when you know exactly when to increase or decrease the number of instances in your group, simply because the need arises on a predictable schedule. </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#scale-dynamically-based-on-demand","title":"Scale dynamically based on demand","text":"<p>A more advanced way to scale your resources, using dynamic scaling, lets you define a scaling policy that dynamically resizes your Auto Scaling group to meet changes in demand.</p> <p> </p> <p>Fig. Dynamic AWS EC2 Autoscaling</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#scale-proactively","title":"Scale proactively","text":"<ul> <li>You can also combine predictive scaling and dynamic scaling (proactive and reactive approaches, respectively) to scale your EC2 capacity faster. </li> <li>Use predictive scaling to increase the number of EC2 instances in your Auto Scaling group in advance of daily and weekly patterns in traffic flows. </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#how-does-ec2-auto-scaling-work","title":"How does EC2 Auto Scaling work?","text":"<p>Fig. How to Build an Auto-scaling Group of AWS EC2 Instance</p> <p>When configuring EC2 Auto Scaling, you\u2019ll need to follow these basic steps in the AWS console.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#step-1-draft-a-launch-template","title":"Step #1: Draft a Launch Template","text":"<ul> <li>Launch Templates in Amazon EC2 define the settings for launching instances. It contains the ID of the Amazon Machine Image (AMI), the instance type, a key pair, security groups, and other parameters used to launch EC2 instances. </li> <li>This replaces the legacy Launch Configuration option, while adding additional features.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#step-2-set-up-auto-scaling-groups","title":"Step #2: Set up Auto Scaling Groups:","text":"<ul> <li>Auto Scaling Groups are logical collections of EC2 instances, used to manage how instances are scaled out or in using Launch Templates / Launch Configurations. Once the Launch Template defines what to scale, the ASG determines where to launch the EC2 instances.</li> <li>You can specify the initial, minimum, maximum, and preferred number of instances.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#step-3-implement-elastic-load-balancer","title":"Step #3: Implement Elastic Load Balancer","text":"<p>ELBs help evenly distribute incoming traffic among Amazon EC2 instances within your Auto Scaling groups as they scale up and down. And when an EC2 instance fails, the load balancer can reroute traffic to the next available healthy EC2 instance.</p> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#step-4-set-auto-scaling-policies","title":"Step #4: Set Auto Scaling Policies","text":"<ul> <li>Scaling policies dictate how and when the ASG should scale up or down. For example, a policy might be to scale out (add instances) when CPU utilization exceeds 80% for a period and to scale in (remove instances) when it drops below 30%.</li> <li>An advanced scaling configuration might consist of scaling policies tracking multiple targets and/or step scaling policies for coverage of various scenarios.</li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/17%20-%20EC2%20Auto%20Scaling/#challenges-of-using-ec2-auto-scaling","title":"Challenges of using EC2 Auto Scaling","text":"<p>EC2 Auto Scaling can help improve fault tolerance, availability and cost management. However, there are also challenges associated with Auto Scaling.</p> <p>Running Spot instances in ASG with Mixed Instance Families: - Spot can sometimes be cheaper. However, the unpredictable nature of Spot Instance terminations and 2-minute warning provided by AWS means that it can be complex, time-consuming, and even risky to run Spot.</p> <p>Choosing the right combination of Spot instances - Spot instances vary in type, price and availability zone, and the market constantly fluctuates in terms of (1) what is available and (2) how much it costs.  </p> <p>Compatibility of instance families with workloads - Selecting the right instance types for your Auto Scaling group depends on factors such as CPU, memory, network performance, and storage requirements. </p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/","title":"Setting Up an Auto Scaling Group","text":""},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#prerequisites","title":"Prerequisites","text":"<p>Before creating an Auto Scaling Group, ensure that: - You have an EC2 instance or an Amazon Machine Image (AMI). - You've configured a key pair for SSH access. - A VPC (Virtual Private Cloud) and subnets are available for your instances. - Ensure that you have the necessary IAM permissions to create Auto Scaling Groups, Launch Templates, and EC2 Instances.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#step-1-create-a-launch-template-or-launch-configuration","title":"Step 1: Create a Launch Template or Launch Configuration","text":"<p>A Launch Template or Launch Configuration defines the configuration for instances in your Auto Scaling Group, including the AMI, instance type, key pair, security group, and block storage options.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#using-the-aws-management-console","title":"Using the AWS Management Console:","text":"<ol> <li>Navigate to the EC2 Dashboard:</li> <li>Log in to the AWS Management Console.</li> <li> <p>In the search bar, type \"EC2\" and select EC2 from the results.</p> </li> <li> <p>Create a Launch Template:</p> </li> <li>On the left sidebar, under Instances, click Launch Templates.</li> </ol> <p></p> <ul> <li>Click Create launch template.</li> </ul> <p></p> <ul> <li>Provide a Name and Description for the template.</li> </ul> <p></p> <ul> <li>Under Source AMI, select the AMI we made earlier.</li> </ul> <p></p> <ul> <li>Choose an Instance type (e.g., t2.micro for free tier).</li> </ul> <p></p> <ul> <li>Assign a Key Pair for SSH access to your instances.</li> </ul> <p></p> <ul> <li>In the Network settings, select your VPC and choose the subnet where your instances are located.</li> <li>Under Security Groups, select the security group we chose earlier.</li> </ul> <p></p> <ul> <li> <p>Leave storage as it is as it is already defined in the AMI.</p> </li> <li> <p>Click Create launch template.</p> </li> </ul>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#using-aws-cli","title":"Using AWS CLI:","text":"<p>You can also create a Launch Template using the AWS CLI:</p> <pre><code>aws ec2 create-launch-template \\\n    --launch-template-name my-template \\\n    --version-description \"Version 1\" \\\n    --launch-template-data '{\n      \"ImageId\": \"ami-0abcdef1234567890\",\n      \"InstanceType\": \"t2.micro\",\n      \"KeyName\": \"my-key-pair\",\n      \"SecurityGroupIds\": [\"sg-0123456789abcdef0\"],\n      \"BlockDeviceMappings\": [{\n        \"DeviceName\": \"/dev/xvda\",\n        \"Ebs\": {\n          \"VolumeSize\": 8,\n          \"VolumeType\": \"gp2\"\n        }\n      }]\n    }\n</code></pre>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#step-2-create-an-auto-scaling-group","title":"Step 2: Create an Auto Scaling Group","text":"<p>An Auto Scaling Group ensures that you always have the right number of EC2 instances running to handle your application's load. It automatically increases or decreases the number of instances according to your defined policies.</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#using-the-aws-management-console_1","title":"Using the AWS Management Console:","text":"<ol> <li>Navigate to Auto Scaling Groups:</li> <li>In the EC2 Dashboard, under Auto Scaling, click Auto Scaling Groups.</li> </ol> <p>Click Create Auto Scaling group. </p> <ol> <li>Configure Basic Settings:</li> <li>Name your Auto Scaling group. Select the Launch Template or Launch Configuration created earlier.</li> </ol> <p></p> <ol> <li>Choose a VPC and Subnets:</li> <li>Select a VPC and subnets where your instances will be launched. Se</li> </ol> <p></p> <ol> <li>Attach Load Balancers:</li> <li>Attach our the target group on the load balancer we made to the Auto Scaling group.</li> </ol> <p></p> <ol> <li>For health check, select EC2 or ELB health check.</li> </ol> <p></p> <ol> <li>Configure Instance Scaling</li> <li>Set the Minimum, Desired, and Maximum number of instances.     Example:<ul> <li>Minimum: 2 - If one instance fails, the other will still handle traffic.</li> <li>Desired: 3 - All target instances are running under normal circumstances.</li> <li>Maximum: 5 - During traffic spikes or high demand periods</li> </ul> </li> </ol> <p></p> <p>just click next until you reach the end.</p> <ol> <li>Review and Create:</li> <li>Review the configuration and click Create Auto Scaling group.</li> </ol> <p></p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#using-aws-cli_1","title":"Using AWS CLI:","text":"<p>You can also create an Auto Scaling Group using the AWS CLI:</p> <pre><code>aws autoscaling create-auto-scaling-group \\\n    --auto-scaling-group-name my-auto-scaling-group \\\n    --launch-template \"LaunchTemplateName=my-template,Version=1\" \\\n    --min-size 1 \\\n    --max-size 4 \\\n    --desired-capacity 2 \\\n    --vpc-zone-identifier \"subnet-0123456789abcdef0,subnet-0abcdef1234567890\"\n</code></pre> <p>Note - To verify auto scaling behaviour, refer to this documentation https://docs.aws.amazon.com/sagemaker/latest/dg/endpoint-scaling-loadtest.html</p>"},{"location":"Workshops/Cloud%20Computing/Backbone%20of%20AWS/18%20-%20Creating%20an%20auto%20scaling%20group/#cleanup","title":"Cleanup","text":"<ul> <li>Remember to delete the Auto Scaling Group and Launch Template when you're done to avoid incurring unnecessary costs.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/","title":"First Line of Defense","text":"First Line of Defense: AWS Account Security 101 with IAM"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Workshop Overview</li> <li>Prerequisites</li> <li>Workshop Elements</li> <li>AWS Accounts: The Basics</li> <li>Shared Responsibility Model</li> <li>Creating AWS Accounts</li> <li>Setting Up Multi-Factor Authentication (MFA)</li> <li>Identity and Access Management (IAM)<ul> <li>Users and ARNs</li> <li>Creating an Admin IAM User</li> <li>Access Keys and AWS CLI v2</li> <li>Groups and Permission Management</li> <li>Roles and Policies</li> <li>Policy Simulator</li> </ul> </li> <li>Granting Billing Console Access</li> <li>Budget Alarms and Budget Creation</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#workshop-overview","title":"Workshop Overview","text":"<p>In this workshop, you'll gain a deep understanding of AWS Account Security, with a focus on Identity and Access Management (IAM). Through hands-on activities, you'll learn to establish secure AWS environments by managing user accounts, permissions, and enforcing Multi-Factor Authentication (MFA).</p> <p>By the end of the session, you will have the skills to safeguard your AWS accounts, manage user access efficiently, and optimize your cloud expenses.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following tools installed before starting:</p> <ul> <li>Password Manager: Bitwarden</li> <li>Windows Subsystem for Linux (WSL): Install WSL</li> <li>Multi-Factor Authenticator App: Install an MFA app like Duo Mobile Google Authenticator.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#workshop-elements","title":"Workshop Elements","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/#aws-accounts-the-basics","title":"AWS Accounts: The Basics","text":"<p>This module covers the essential elements of AWS account structures and their importance for securing cloud resources. Topics include:</p> <ul> <li>AWS Account Hierarchy: Understand the different types of AWS accounts and their roles.</li> <li>Account Settings and Configuration: Learn how to configure your account for optimal security.</li> <li>Security Best Practices: Implement foundational security measures and understand AWS's built-in security features.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#shared-responsibility-model","title":"Shared Responsibility Model","text":"<p>Dive deep into the Shared Responsibility Model, which defines the division of security responsibilities between AWS and its users. Key points include:</p> <ul> <li>Understanding AWS Responsibilities: What AWS manages, including hardware, software, networking, and facilities.</li> <li>User Responsibilities: Your role in managing data, applications, and access controls.</li> <li>Security and Compliance: How to leverage AWS tools and services to meet compliance requirements.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#creating-aws-accounts","title":"Creating AWS Accounts","text":"<p>Learn the step-by-step process for creating and configuring AWS accounts, focusing on security and best practices:</p> <ul> <li>Creating New Accounts: Detailed instructions on setting up new AWS accounts.</li> <li>Account Structure Best Practices: Guidelines for organizing accounts for different environments (development, testing, production).</li> <li>Account Security Configuration: How to configure security settings and enable necessary features.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#setting-up-multi-factor-authentication-mfa","title":"Setting Up Multi-Factor Authentication (MFA)","text":"<p>Master the implementation of MFA to enhance account security. This module includes:</p> <ul> <li>MFA Overview: The importance of MFA in protecting AWS accounts.</li> <li>Enabling MFA: Step-by-step instructions for setting up MFA for root and IAM users.</li> <li>MFA Types: Different MFA methods (hardware tokens, mobile apps) and their applications.</li> <li>Troubleshooting MFA Issues: Common problems and how to resolve them.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#identity-and-access-management-iam","title":"Identity and Access Management (IAM)","text":"<p>Explore the core components of IAM and how to use them effectively:</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#users-and-arns","title":"Users and ARNs","text":"<ul> <li>IAM Users: How to create and manage IAM users.</li> <li>Amazon Resource Names (ARNs): Understanding and using ARNs to specify resources.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#creating-an-admin-iam-user","title":"Creating an Admin IAM User","text":"<ul> <li>Admin User Creation: Detailed process for setting up an admin IAM user with appropriate permissions.</li> <li>Securing Admin Users: Best practices for securing admin accounts.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#access-keys-and-aws-cli-v2","title":"Access Keys and AWS CLI v2","text":"<ul> <li>Generating Access Keys: How to create and manage access keys for programmatic access.</li> <li>Using AWS CLI v2: Configuring and using AWS CLI v2 with access keys.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#groups-and-permission-management","title":"Groups and Permission Management","text":"<ul> <li>IAM Groups: How to create and manage IAM groups for organizing users.</li> <li>Permissions Management: Assigning permissions to groups and understanding permission policies.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#defining-iam-roles","title":"Defining IAM Roles","text":"<ul> <li>Defining IAM Roles: How to create and configure IAM roles for various use cases.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#iam-policies","title":"IAM Policies","text":"<ul> <li>Attaching Policies: Best practices for attaching and managing policies.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#policy-simulator","title":"Policy Simulator","text":"<ul> <li>Using the Policy Simulator: How to test and validate IAM policies to ensure they meet your security requirements.</li> <li>Interpreting Results: Understanding simulation results to refine policies.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#granting-billing-console-access","title":"Granting Billing Console Access","text":"<p>Learn to manage access to the billing console:</p> <ul> <li>Granting Access: Detailed steps for providing IAM users with access to the billing console.</li> <li>Configuring Billing Permissions: Setting up appropriate permissions to control billing information access.</li> <li>Monitoring Billing Activity: How to monitor and review billing activity to ensure proper access controls.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/#budget-alarms-and-budget-creation","title":"Budget Alarms and Budget Creation","text":"<p>Gain expertise in managing and controlling your cloud spend with these topics:</p> <ul> <li>Creating Budget Alarms: How to set up alarms for monitoring spending thresholds.</li> <li>Setting Up Budgets: Detailed steps to create and manage budgets within AWS.</li> <li>Cost Optimization Tips: Best practices for managing and reducing AWS costs.</li> <li>Reviewing Budget Reports: How to interpret budget reports and adjust configurations accordingly.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/01%20-%20AWS%20Getting%20Started/","title":"AWS Getting Started","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/01%20-%20AWS%20Getting%20Started/#what-is-aws-what-is-it-all-about","title":"What is AWS? What is it all about?","text":"<p>Amazon Web Services (AWS) is a secure and comprehensive cloud computing platform provided by Amazon. A cloud platform offers a range of services like computing power, storage, databases, and networking over the internet, allowing users to manage and scale resources without owning physical hardware. AWS embodies this concept by delivering a vast array of services on a \"pay-as-you-go\" basis, meaning you only pay for what you use. Known for its reliability, scalability, and flexibility, AWS supports a wide range of applications and use cases.</p> <p>An AWS account is like a container where you keep all your AWS resources and manage them. It handles two main things: access control (who can use the resources) and billing (how much you are charged).</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/01%20-%20AWS%20Getting%20Started/#a-brief-overview-of-aws-services","title":"A Brief Overview of AWS Services","text":"<p>AWS provides a broad spectrum of services that cater to various needs:</p> <ol> <li>Compute Services:</li> <li>EC2 (Elastic Compute Cloud): Virtual servers to run applications.</li> <li>AWS Lambda: Serverless computing that automatically scales.</li> <li>Storage Services:</li> <li>Amazon S3 (Simple Storage Service): Scalable object storage.</li> <li>EBS (Elastic Block Store): Block storage for EC2 instances.</li> <li>Database Services:</li> <li>Amazon RDS (Relational Database Service): Managed relational databases like MySQL and PostgreSQL.</li> <li>DynamoDB: Managed NoSQL database.</li> <li>Networking Services:</li> <li>Amazon VPC (Virtual Private Cloud): Isolated network environment.</li> <li>Elastic Load Balancing: Distributes incoming traffic across multiple targets.</li> <li>Other Domains:</li> <li>Machine Learning: Services like SageMaker for building and deploying ML models.</li> <li>Internet of Things (IoT): Services for connecting and managing IoT devices.</li> <li>Blockchain: Managed blockchain services.</li> <li>Analytics: Tools for big data processing and analysis.</li> </ol> <p>Next &gt;&gt; Shared Responsibility Model</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/02%20-%20Shared%20Responsibility%20Model/","title":"AWS: Shared Responsibility Model","text":"<p>The AWS Shared Responsibility Model is a foundational concept in cloud security. It defines the division of security responsibilities between AWS and its customers, ensuring both parties contribute to a secure cloud environment.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/02%20-%20Shared%20Responsibility%20Model/#customers-security-in-the-cloud","title":"Customers: Security in the Cloud","text":"<p>Customers are responsible for the security of everything that they create and put\u00a0in\u00a0the AWS Cloud.</p> <ul> <li>Data Control: Deciding which data to store in AWS, managing permissions, and ensuring proper access controls.</li> <li>Configuration Management: Configuring and managing security settings for AWS services, including Identity and Access Management (IAM) policies.</li> <li>Data Protection: Implementing measures such as encryption, backup, and compliance with relevant regulations.</li> <li>Application Security: Ensuring the security of applications, including patch management and application-level encryption.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/02%20-%20Shared%20Responsibility%20Model/#aws-security-of-the-cloud","title":"AWS: Security of the Cloud","text":"<p>AWS is responsible for securing the infrastructure that runs all of the services offered in the AWS Cloud. This includes:</p> <ul> <li>AWS operates, manages, and controls the components at all layers of infrastructure. This includes areas such as the host operating system, the virtualization layer, and even the physical security of the data centers from which services operate.</li> <li>AWS is responsible for protecting the global infrastructure that runs all of the services offered in the AWS Cloud. This infrastructure includes AWS Regions, Availability Zones, and edge locations.</li> <li>Infrastructure Security: Managing the physical security of data centers, including hardware, software, networking, and facilities.</li> <li>Service Availability: Ensuring the resilience and redundancy of the global infrastructure, including AWS Regions, Availability Zones, and edge locations.</li> <li>Operational Security: Protecting the underlying infrastructure through robust security measures, such as intrusion detection systems and regular audits.</li> </ul> <p>Next &gt;&gt; Creating AWS Account</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/03%20-%20Creating%20AWS%20Account/","title":"Creating an AWS User Account","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/03%20-%20Creating%20AWS%20Account/#prerequisite","title":"PREREQUISITE","text":"<ul> <li>Payment Method - provide a valid credit card or another payment method for identity verification and billing purposes. </li> </ul> <p>The AWS offers a free tier with limited free resources, you must provide a valid credit card or another payment method for identity verification and billing purposes.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/03%20-%20Creating%20AWS%20Account/#steps-to-create-an-aws-user-account","title":"Steps to Create an AWS User Account","text":"<ol> <li>Visit the AWS's official website and click 'Create an AWS Account' at the top right corner of the page.</li> <li>Input your account information. This will serve as an entry to the AWS Console. </li> </ol> <p> - Input your Root User Email Address. If you wish to open a personal account, use your email account, otherwise use your corporate email distribution list or email box for a professional AWS account. - Provide an AWS Account Name. Choose a unique name for your account. This can be your name, company name, or anything you prefer.  - Verify your email address. Check the code sent to your email and choose Verify.</p> <p></p> <ol> <li>Input a Secure Password. Create a strong root user password for your AWS account then choose Continue.</li> <li> <p>Select Account Type. Select 'Personal' or 'Professional' depending on your use case. </p> <p></p> </li> </ol> <p>Business and personal accounts have similar features and functions. In business AWS accounts, it is essential to provide the company's credentials including the phone number, email address, and payment details. Read and accept the AWS Customer Agreement and select Continue. </p> <ol> <li> <p>Check your Email. An email will be sent to your email address to confirm that your account has been created.</p> <p></p> </li> </ol> <p>NOTE: You cannot fully utilize AWS services until your account is fully activated. This process includes verifying your email, entering billing information, and completing phone verification.</p> <ol> <li>Input your payment information. Navigate to the Billing information page and select your preferred payment method then choose Verify and Add.   AWS requires this for identity verification and to bill you for any resources you use beyond the free tier.</li> </ol> <p></p> <ol> <li>Verify your identity. Visit the Confirm your Identity page, select your phone number country (+63) code from the list and AWS will send a code to your phone number for verification. Enter the code when prompted. If CAPTCHA is presented, input the displayed code then hit Submit. Enter the pin and choose Continue. </li> </ol> <p></p> <ol> <li>Select a Support Plan. AWS offers different support plans. For beginners, the Basic Support plan (which is free) is usually sufficient. </li> <li>Choose Complete signup and check your email inbox for confirmation. </li> </ol> <p>Some instances occur where the process may usually take up to 24 hours. When this happens, you can still sign in to your AWS Account but the Complete Sign Up button shows up despite completing the steps of the sign-up process.  </p> <p>Next &gt;&gt; Setting Up MFA</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/","title":"Multi-factor Authentication","text":"<p>Before we delve into the actual application of MFA, let\u2019s first understand the key concepts surrounding it.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#mfa-concept-a-safe-with-two-locks","title":"MFA Concept: A safe with two locks.","text":"<p>Imagine a safe that requires two keys to open. One key is something that you have, but you also need the second key to unlock the safe. Just as a safe with two locks requires two keys to be opened, MFA requires two different factors to access your account. Even if someone has the first key (personal password), they cannot open the safe without the second key (MFA code).</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#authenticator-concept-the-gatekeeper","title":"Authenticator Concept: The Gatekeeper","text":"<p>Authenticator is like a gatekeeper who verifies your identity before granting you access to a secure area. It is the giver of the second key (MFA code). A gatekeeper checks credentials to ensure only authorized individuals can enter, an authenticator generates and verifies codes to confirm that the person trying to access the account is genuinely who they claim to be.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#enabling-mfa-for-root-user-demo","title":"Enabling MFA for Root User [DEMO]","text":"<p>Now that you understand some of the basic concepts, let's delve into the actual implementation of MFA in a user account.</p> <p>Upon creation of your root user account, you will see in the IAM Dashboard the security recommendations. It is saying that it is better for you to add MFA for root user.</p> <p></p> <p>With these foundational concepts in mind, we can now proceed to implement multifactor authentication (MFA) on your account. This step will enhance your security by adding an additional layer of protection, ensuring that your sensitive information remains safe from unauthorized access. Let\u2019s walk through the process of setting up MFA and explore how it can help safeguard your account against potential threats. Now, click \u201cAdd MFA\u201d.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#step-1-select-mfa-device","title":"Step 1: Select MFA Device","text":"<p>It should take you to this section wherein you can set up your MFA.</p> <p></p> <p>As you can see, there are only 2 steps to doing this. You can give a certain device name of your choice.</p> <p></p> <p>You have 3 options to choose from. Nowadays, the authenticator app is used more frequently since it is fast and portable. You can download Google Authenticator, Duo Mobile, or Authy app on your mobile device or computer.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#step-2-set-up-device","title":"Step 2: Set up Device","text":"<p>Once you are done downloading your authenticator app, you can now proceed to this section.</p> <p> The instructions here are self-explanatory. You can now show the QR Code. For google authenticator, press the \u201c+\u201d symbol and the scan QR code will show, or you can use a secret key.</p> <p></p> <p>The moment you scan the QR code, the authenticator will give you codes. Type the first code in the \u201cMFA Code 1 box\u201d and the second code in the \u201cMFA Code 2 box\u201d. After that, press \u201cAdd MFA\u201d.</p> <p></p> <p>With that, your MFA implementation is done. Now, it is time to test it.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/04%20-%20Multi-factor%20Authentication/#step-3-testing-the-mfa","title":"Step 3: Testing the MFA","text":"<p>Prepare your authenticator app first. Once you are done preparing it, let us now test if the authenticator gives the second password to us.</p> <p></p> <p>Here, you can enter your root user email address. After that, press \u201cNext\u201d.</p> <p></p> <p>Now, enter your password. This is the first key to your safe.</p> <p></p> <p>Now, it requires you to give the second password. Look at your authenticator and type the current code.</p> <p></p> <p>Congratulations! You can access your account now.</p> <p>In conclusion, multi factor authentication (MFA) is a vital security tool that significantly enhances the protection of your online accounts by requiring multiple forms of verification. By implementing MFA, you add an extra layer of defense against unauthorized access, making it much more difficult for malicious actors to compromise your sensitive information. In today\u2019s digital world, where cyber threats are constantly evolving, MFA is an essential component of any robust security strategy.</p> <p>Next &gt;&gt; AWS Identity and Access Management (IAM)</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/","title":"AWS Identity and Access Management","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#introduction","title":"Introduction","text":"<p>AWS Identity and Access Management (IAM) is a fundamental service in AWS that allows you to control access to AWS resources securely. This workshop will guide you through the key features of IAM, how they work, and best practices for implementing IAM in your AWS environment.</p> <p>IAM enables the creation and management of users, user groups, and permissions for AWS services. It also supports integration with third-party solutions, facilitating the management of federated users, which allows external users to access AWS resources securely.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#iam-identities","title":"IAM Identities","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#iam-identities-iam-users","title":"IAM Identities: IAM Users","text":"<p>An AWS Identity and Access Management (IAM) user is an entity that you create in AWS to represent a human user or a workload that interacts with AWS. Each IAM user has a name and credentials, and there are several ways to manage and use these credentials:</p> <ul> <li>Friendly Name: This is the name you specify when creating the IAM user, visible in the AWS Management Console.  </li> <li>Amazon Resource Name (ARN): A unique identifier used to specify the IAM user across all of AWS, useful in IAM policies.  </li> <li>Unique Identifier: Returned when creating the IAM user via API, CLI, or Tools for Windows PowerShell. </li> </ul> <p>Default limit is 5,000 IAM Users per account. You can request an increase if needed.  </p> <p>Permissions:</p> <ul> <li>Default: No permissions initially; must be granted via IAM policies.  </li> <li>Permissions Boundary: Limits maximum permissions.  </li> <li>Account Association: No separate payment method needed; all activities billed to the account.  </li> <li>Service Accounts: Use IAM users with credentials for AWS requests; avoid embedding keys in code; prefer temporary credentials (IAM roles).</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#iam-identities-iam-groups","title":"IAM Identities: IAM Groups","text":"<p>An IAM Group is a collection of IAM users that simplifies the management of permissions. Instead of assigning policies individually to each user, you can attach policies to groups, and all users within that group will inherit those permissions.</p> <p>Key Points</p> <ul> <li>No Nested Groups: AWS IAM does not support nested groups. Groups can only contain users, not other groups. However, users can belong to multiple groups. For example, a user who is both a developer and an artist could be part of separate groups like Developers and CreativeTeam.  </li> <li>Centralized Management: Manage permissions for multiple users collectively from a single location.  </li> <li>Inheritance: Users in a group automatically inherit the permissions assigned to the group.  </li> <li>Scalability: Streamlines permissions management as teams expand or change.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#iam-roles","title":"IAM Roles","text":"<p>Roles offer a way to grant temporary access to AWS resources without relying on permanent credentials. This approach is especially useful for scenarios that require short-term access or adhere to best practices that discourage hardcoding credentials.</p> <p>Key Uses of IAM Roles</p> <ul> <li>Secure Resource Access: Allow AWS services like EC2 to access other resources, such as S3 buckets, without storing credentials.  </li> <li>Cross-Account Access: Enable sharing of resources and permissions between different AWS accounts.  </li> <li>Role Chaining: Support sequential role assumption for varying levels of access and control.</li> </ul> <p>Structure of IAM Roles</p> <ul> <li>Trust Policies: Specify which entities (users or services) are allowed to assume the role.  </li> <li>Permissions Policies: Define the actions the role can perform on AWS resources.  </li> <li>Permissions Boundaries: Set limits on the maximum permissions that the role can grant, ensuring adherence to the principle of least privilege.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#policies","title":"Policies","text":"<p>IAM Identities enables you to grant different levels of access to different identities, but how exactly do you manage the credentials attached and the access-level allowed? </p> <p>IAM policies are attached to identities. IAM Policies are JSON documents that define the permissions for API calls and entities, detailing effects, actions, resources, and conditions. They determine what controls are activated, as all controls are off by default. These policies are attached to identities, such as users, groups, and roles, to manage their permissions. IAM Policies are accessible through the AWS CLI, AWS SDKs, and the AWS Management Console.</p> <p>Policy Categories:</p> <ul> <li> <p>Identity-Based:</p> </li> <li> <p>Inline: Directly attached to IAM identities.  </p> </li> <li> <p>Managed: Reusable and attachable to multiple identities. Can be AWS-managed or customer-managed.</p> </li> <li> <p>Resource-Based: Attached to resources (e.g., S3 buckets), specify access controls directly on the resource.</p> </li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#key-features-of-aws-iam","title":"Key Features of AWS IAM","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#1-fine-grained-access-control","title":"1. Fine-Grained Access Control","text":"<p>IAM provides the ability to define precise permissions, allowing you to specify who can access particular AWS services and resources and under what conditions. This control is implemented through policies that define the actions that can be performed on specific resources.</p> <ul> <li>Granular Permissions: Control access at a detailed level by defining policies that specify allowed actions and resources.  </li> <li>Conditional Access: Set conditions for access, such as requiring requests to come from a specific IP range or requiring multi-factor authentication (MFA).</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#2-delegating-access-using-iam-roles","title":"2. Delegating Access Using IAM Roles","text":"<p>IAM roles allow you to delegate access to users or AWS services without needing to share long-term credentials. Roles provide temporary security credentials for users, applications, or services that need to perform actions in your AWS environment.</p> <ul> <li>Temporary Credentials: Roles grant short-term access, ideal for use cases like automated workflows, third-party applications, and cross-account access.  </li> <li>Role Assumption: Users or services assume a role to receive temporary credentials and access AWS resources as defined by the role's policies.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#3-iam-roles-anywhere","title":"3. IAM Roles Anywhere","text":"<p>IAM Roles Anywhere extends the ability to use IAM roles to workloads that run outside of AWS, such as on-premises or in hybrid and multicloud environments. This feature uses X.509 digital certificates for authentication.</p> <ul> <li>External Access: Workloads outside AWS can securely obtain temporary AWS credentials and access AWS resources.  </li> <li>Consistency: Use the same IAM roles and policies for both AWS-hosted and external workloads.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/05%20-%20AWS%20Identity%20and%20Access%20Management/#4-iam-access-analyzer","title":"4. IAM Access Analyzer","text":"<p>IAM Access Analyzer helps you manage and refine permissions by continuously analyzing access policies to ensure they adhere to the principle of least privilege.</p> <ul> <li>Permissions Analysis: Identify unused or excessive permissions and adjust them to align with best practices.  </li> <li>Least Privilege: Continuously refine permissions to ensure that users and services have the minimum access necessary.</li> </ul> <p>Next &gt;&gt; IAM Users</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/","title":"IAM Users and ARNs","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#what-is-an-iam-user","title":"What is an IAM User?","text":"<p>An IAM user is a regular account that you create for someone who needs access to your AWS resources. It is similar to giving someone a unique, personalized key that only opens specific doors you have assigned to them.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#why-create-iam-users","title":"Why create IAM Users?","text":"<p>When you create an AWS account, you are provided with a root user, which acts as a master key. However, using this \"master key\" at all times is risky. Instead, you create IAM users and assign them the specific permissions they require. This is a good practice because if something goes wrong with one user, the other accounts remain secure.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#what-does-an-iam-user-have","title":"What does an IAM User have?","text":"<p>An IAM user has a username and password, which serve as a key to access permissions. Depending on the permissions assigned, IAM users can access certain resources. Additionally, they have access keys, which are special credentials that allow them to interact with AWS services from the command line or through code.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#creating-iam-user","title":"Creating IAM User","text":"<p>When creating an AWS account, you create an identity called the root user  which has complete access to all AWS services and resources. It is highly discouraged to use the root user for daily tasks, instead we use a certain ID and password which becomes your AWS User account. A user account is not a separate account, but instead is a user within your account.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-1-go-to-your-aws-console-and-open-iam-dashboardconsole","title":"Step 1: Go to your AWS Console and open IAM Dashboard/Console","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-2-in-the-side-bar-click-on-users-to-see-users-and-create-users","title":"Step 2: In the side bar, click on \u201cUsers\u201d to see users and create users.","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-3-once-you-click-create-user-it-will-lead-to-the-specification-of-access-and-user-details","title":"Step 3: Once you click \u201cCreate User\u201d, it will lead to the specification of access and user details.","text":"<ol> <li>You can enter a certain name for a user as well as provide the user to access the AWS management console (but it is optional). If you don\u2019t provide the access to AWS Management Console, the user can only access your AWS account using SDK or CLI (programmatic access).</li> <li>Assuming that you checked it, AWS will ask if you wish to provide console access to a person. If you choose the first one, you will be redirected to the IAM Identity Center wherein you can centrally manage user access to services. In this case, we select \u201cI want to create an IAM user\u201d.</li> <li>You can select the specification of a password whether it is autogenerated, custom, or let the user create a new password at next sign-in.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-4-setting-permissions-for-the-account","title":"Step 4: Setting permissions for the account","text":"<p>To grant the admin IAM account full access, attach the \"AdministratorAccess\" policy to the IAM account, which provides it with comprehensive permissions across all AWS services and resources.</p> <p>Policies are Javascript Object Notation (JSON) that can define the access of the IAM user. You can select certain policies for the IAM user as well the permissions boundary of it (optional). We will explore policies in more detail at a later stage.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-5-review-and-create","title":"Step 5: Review and Create","text":"<p>In this part, AWS gives you a chance to review all of your choices to ensure everything is as you want it, also allowing you to change any details as you want it one last time. Once you are finished reviewing your choices, simply click \u201cCreate user\u201d.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-6-retrieval-and-finishing","title":"Step 6: Retrieval and Finishing","text":"<p>After creating the IAM user, you are almost set! The final step involves downloading the user's console sign-in details, which include important information like the username, password, and the console sign-in link. You can easily download these details as a .csv file, which serves as a backup and a quick reference for future logins.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-7-testing-the-iam-user-to-check-if-it-works-perfectly","title":"Step 7: Testing the IAM User to check if it works perfectly.","text":"<p>Input the created credentials to check if you can access it.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-8-create-new-password-change-the-autogenerated-password","title":"Step 8: Create New Password (Change the Autogenerated Password)","text":"<p>After logging in with the autogenerated password, the user should promptly log in and change it to a new, secure password. This is a crucial step in protecting the account and ensuring that the credentials remain confidential and safe.</p> <p>Simply enter your old password, the one from the .csv file, and then generate and enter a new password using the Bitwarden Password Manager.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#step-9-save-new-password-in-a-password-manager-bitwarden","title":"Step 9: Save New Password in a Password Manager (Bitwarden)","text":"<p>We will be using the Bitwarden password manager. It is essential for maintaining robust cybersecurity practices, as it securely stores and encrypts passwords, enabling the use of strong, unique credentials for each account. This approach mitigates the risk of security breaches caused by weak or reused passwords, enhancing overall organizational and personal data protection.</p> <p>Enter the item name, username, and generate password. You can paste your console sign-in url from the credentials.csv you downloaded to the Bitwarden URI field.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#what-is-an-arn","title":"What is an ARN?","text":"<p>In AWS, which functions as a massive digital library of resources (such as virtual computers, storage spaces, and databases), an ARN (Amazon Resource Name) is a special code or label that points to the exact \"book\" or resource you want to use.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#why-do-we-need-arns","title":"Why do we need ARNs?","text":"<p>AWS has millions of different resources, so it is often necessary to specify which one you are referring to. For example, if you have two storage buckets (similar to two different folders), you need a way to distinguish between them. ARNs help by providing a unique name for each resource.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#when-do-you-use-arns","title":"When do you use ARNs?","text":"<p>If you want to give someone permission to access a specific file in your digital library, you would use the ARN of that file to tell AWS exactly which one you are referring to. It is similar to giving directions that say, \"Go to this exact address and pick up the specific book there.\"</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/06%20-%20IAM%20Users%20and%20ARNs/#what-does-an-arn-look-like","title":"What does an ARN look like?","text":"<pre><code>arn:partition:service:region:account-id:resouce-type/resource-id\n</code></pre> <pre><code>arn:aws:ec2:us-west-2:123456789012:instance/i-0abcd1234ef567890\n</code></pre> <ul> <li> <p>ARN: This indicates that what follows is an Amazon Resource Name.</p> </li> <li> <p>Partition: Specifies the AWS partition in which the resource is located. Common partitions include <code>aws</code> (for AWS regions) and <code>aws-cn</code> (for China regions).</p> </li> <li> <p>Service: Identifies the AWS service to which the resource belongs (e.g., <code>s3</code> for Amazon S3, <code>ec2</code> for Amazon EC2).</p> </li> <li> <p>Region: Specifies the region where the resource is located. Some services, like S3, are global, so this part might be omitted.</p> </li> <li> <p>Account-id: The AWS account ID that owns the resource. This is a 12-digit number.</p> </li> <li> <p>Resource-type/resource-id: Specifies the resource type and the unique identifier for the resource. The format and inclusion of resource-type may vary depending on the service.</p> </li> </ul> <p>Next &gt;&gt; Creating Access Keys and Setting Up AWS v2 Tools</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/","title":"IAM Access Keys","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#what-are-iam-access-keys","title":"What are IAM Access Keys?","text":"<p>IAM Access Keys consist of two components: an Access Key ID and a Secret Access Key. These keys are analogous to a username and password and are used to sign programmatic requests to AWS services. </p> <p>The Access Key ID is a unique identifier, while the Secret Access Key is a secret that should only be known by the user who owns the key.</p> <p></p> <p>IAM Access Keys are used when you want to interact with AWS services via APIs, the AWS Command Line Interface (CLI), or AWS SDKs. They are essential for automation tasks, such as running scripts that manage AWS resources or integrating with third-party applications that require access to your AWS account.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#why-do-we-need-access-keys","title":"Why do we need Access Keys?","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#1-security-and-access-control","title":"1. Security and Access Control","text":"<ul> <li>Non-Root Access: It's a best practice to avoid using root account credentials. Instead, you can create IAM users with Access Keys, each with specific roles and permissions, reducing the risk associated with using high-privileged accounts.  </li> <li>Granular Permissions: You can create Access Keys for specific users with precise permissions, following the principle of least privilege. This allows you to control which actions or resources the keys can access.  </li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#2-programmatic-access","title":"2. Programmatic Access","text":"<ul> <li>APIs and SDKs: Access Keys are used by AWS SDKs (e.g., for Python, Java, or Node.js) and APIs to authenticate and authorize programmatic requests. This is crucial for developers building applications that need to interact with AWS resources directly.  </li> <li>Command Line Interface (CLI): The AWS CLI, a powerful tool for managing AWS resources from the command line, also relies on Access Keys for authentication.  </li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#3-automating","title":"3. Automating","text":"<ul> <li>CI/CD Pipelines: Continuous Integration/Continuous Deployment (CI/CD) tools often use Access Keys to automate the deployment of applications, infrastructure changes, or updates to AWS services.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#how-to-create-access-keys-in-the-management-console","title":"How to Create Access Keys in the Management Console","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#1-navigate-to-the-iam-service","title":"1. Navigate to the IAM Service","text":"<p>In the AWS Management Console, search for \"IAM\" in the search bar at the top and click on the IAM service from the results.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#2-select-a-user","title":"2. Select a User:","text":"<p>In the \"Users\" section, click on the username which we created earlier.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#3-create-access-keys","title":"3. Create Access Keys:","text":"<p>Once a user is selected, create access key 1 by clicking the Create Access Key</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#4-use-case","title":"4. Use Case","text":"<p>Select the Command Line Interface to enable the AWS CLI to access this AWS IAM User account.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#5-set-description-tag-optional","title":"5. Set Description Tag (optional)","text":"<p>After setting a description tag, you can now create access key by clicking the button.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#6-download-the-access-key","title":"6. Download the Access Key","text":"<ul> <li>After the access key is generated, you'll see the Access Key ID and Secret Access Key.</li> <li>Make sure to download the <code>.csv</code> file or copy the Access Key ID and Secret Access Key immediately. AWS does not store the Secret Access Key, so if you lose it, you'll have to create a new access key.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#how-to-set-up-aws-v2-tools","title":"How to Set Up AWS v2 Tools","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#install-unzip-in-linux-or-wsl","title":"Install unzip in Linux or WSL","text":"<pre><code>sudo apt install unzip \n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#download-and-install-aws-cli","title":"Download and Install AWS CLI","text":"<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n\nunzip awscliv2.zip\n\nsudo ./aws/install\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#verify-aws-cli-installation","title":"Verify AWS CLI Installation","text":"<pre><code>aws --version\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#configure-aws-cli-default-profile","title":"Configure AWS CLI (Default Profile)","text":"<pre><code>aws configure\n</code></pre> <p>Upon executing the command, the following output will be displayed in the terminal.</p> <pre><code>AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID\n\nAWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY\n\nDefault region name [None]: ap-southeast-1\n\nDefault output format [None]:\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#how-to-create-access-keys-using-aws-cli","title":"How to Create Access Keys Using AWS CLI","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#list-users","title":"List users:","text":"<pre><code>aws iam list-users\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#create-access-key-for-a-specific-user","title":"Create access key for a specific user","text":"<pre><code>aws iam create-access-key --user-name &lt;IAM_username&gt;\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#test-your-configuration","title":"Test your Configuration","text":"<p>Before testing our configuration, we need to create an Amazon S3 bucket using the AWS Management Console. This process will help you verify that your AWS CLI credentials and access keys are correctly configured.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#creating-s3-bucket","title":"Creating S3 Bucket","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#1-navigate-to-the-iam-service_1","title":"1. Navigate to the IAM Service","text":"<p>In the AWS Management Console, search for \"S3\" in the search bar at the top and click on the IAM service from the results.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#2-create-a-bucket","title":"2. Create a Bucket","text":"<ul> <li>On the S3 Dashboard, click the Create bucket button.</li> <li>You\u2019ll be taken to the Create bucket wizard.</li> </ul> <ul> <li>Configure Bucket Settings</li> <li>Enter a unique name for your bucket. Bucket names must be globally unique across all AWS accounts.</li> <li>Scroll down, leave all as it is by default and click <code>Create Bucket</code></li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#3-upload-a-file-to-your-bucket","title":"3. Upload a File to Your Bucket","text":"<p>Click on your newly created bucket to open it.</p> <p></p> <p>Click the Upload button.</p> <p></p> <p>In the upload dialog, drag and drop files or use the Add files button to select files from your computer.</p> <p>Click the Upload button to start the upload process.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#testing-aws-cli-access-keys-using-listing-buckets","title":"Testing AWS CLI Access Keys Using Listing Buckets","text":"<pre><code>aws s3 ls\n</code></pre>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/07%20-%20IAM%20Access%20Keys/#testing-list-s3-buckets-using-specific-profile-optional","title":"Testing: List S3 Buckets Using Specific Profile (Optional)","text":"<p>If you have multiple profiles configured in your AWS CLI, follow the steps below to list S3 buckets using a specific profile.</p> <p>View the profile list created: </p> <p><pre><code>cat ~/.aws/credentials\n</code></pre> <pre><code>aws s3 ls --profile myprofile\n</code></pre></p> <p>Next &gt;&gt; IAM Groups</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/08%20-%20IAM%20Groups/","title":"IAM Groups","text":"<p>An IAM group is a collection of users with specific permissions assigned to all group members. This approach simplifies the management of user privileges by allowing administrators to assign permissions to groups rather than to each user individually. </p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/08%20-%20IAM%20Groups/#iam-groups-allow-you-to","title":"IAM Groups allow you to:","text":"<ul> <li> <p>Manage Users: Assign access keys.</p> </li> <li> <p>Define Roles: Provide access to resources without sharing passwords or keys.</p> </li> <li> <p>Utilize Groups: Organize users into groups with specific permissions.</p> </li> <li> <p>Apply Policies: Attach policies to users, groups, or roles to define permitted actions.</p> </li> </ul> <p>This ensures that users can only perform actions within the scope of their group's permissions, maintaining security and control within the AWS environment.</p> <p></p> <p>For example, an account has three groups: developers, data analysts, and admins group. Each group has specific permissions tailored to their roles:</p> <ul> <li>Admins: They have full administrative access, including the ability to manage all resources, create new IAM users, and assign permissions.</li> <li>Developers: They have permission to deploy and manage code in AWS services like EC2 and Lambda.</li> <li>Test: Have access to testing environments and related services, enabling them to verify and test the deployed code.</li> </ul> <p>Each user in the organization can be assigned to one or more of these groups based on their responsibilities, simplifying the management of permissions and ensuring that each user has the appropriate level of access.</p> <p>Next &gt;&gt; Permission Control Using IAM Groups</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/09%20-%20Permission%20Control%20Using%20IAM%20Groups/","title":"Permission Control Using IAM Groups","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/09%20-%20Permission%20Control%20Using%20IAM%20Groups/#creating-iam-user-groups","title":"Creating IAM user groups","text":"<p>Creating and managing IAM (Identity and Access Management) user groups in AWS is essential for maintaining a secure and organized environment. User groups allow you to efficiently manage permissions for multiple users by assigning policies to a group rather than individually configuring each user's access.</p> <p>In this guide, you'll learn how to create an IAM user group, attach policies to the group, and add users to it. This process ensures that users within a group inherit the same set of permissions, making it easier to manage access control across your AWS environment.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/09%20-%20Permission%20Control%20Using%20IAM%20Groups/#steps-overview","title":"Steps Overview","text":"<ol> <li>Log in to the AWS Management Console  </li> <li>Go to the IAM dashboard.  </li> </ol> <p> 3. Navigate to \"Groups\" and click \"Create New Group.\" 4. Enter the Group Name (e.g., Developers).  </p> <p> 5. Attach Policies to the Group:    - Choose policies from the policy list. For this demo, attach the \u2018AmazonEC2ReadOnlyAccess\u2019 policy. 6. Click \"Create Group.\"  </p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/09%20-%20Permission%20Control%20Using%20IAM%20Groups/#adding-users-to-the-group","title":"Adding Users to the Group:","text":"<ol> <li>Navigate to the IAM Dashboard.  </li> <li>Navigate to User Group  </li> <li>Select the user group that you want to add a user to, for this demo choose the one we created earlier.  </li> <li>Click on \u2018Add Users\u2019  </li> </ol> <p> 1. Select the User to Add to the Group</p> <ol> <li>Click on \u2018Add User\u2019</li> </ol> <p></p> <p>You can also edit the certain user\u2019s permissions to add them to the group.</p> <ol> <li>Navigate to the IAM Dashboard.  </li> <li>Navigate to Users  </li> </ol> <p> 1. Click on the user you want to edit permissions and add to the group.  2. Click add permissions 3. Click Add user to a group</p> <p> 4. Choose the group you want to add the user to. 5. Click Next, which will direct you to the review page. Review your choices, and when you are done click \u2018add permissions\u2019</p> <p></p> <p>The user is now added to the selected group, and will inherit the permissions assigned to that group. </p> <p>Next &gt;&gt; IAM Roles</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/","title":"IAM Roles","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#what-are-iam-roles","title":"What are IAM Roles?","text":"<p>IAM (Identity and Access Management) roles provide temporary access to AWS resources without using permanent credentials.  </p> <p>Roles offer a way to grant temporary access to AWS resources without relying on permanent credentials. This approach is especially useful for scenarios that require short-term access or adhere to best practices that discourage hardcoding credentials. Unlike IAM users, IAM roles provide temporary security credentials, which can be assumed by various entities such as users or applications.  IAM roles are versatile and can be used in several important ways. They allow AWS services, such as EC2 instances, to securely access other AWS resources like S3 buckets. Additionally, they facilitate cross-account access, enabling resources and permissions to be shared between different AWS accounts. IAM roles also support role chaining, where multiple roles can be assumed in sequence to achieve varying levels of access.  The structure of IAM roles includes key components: Trust Policies, which define who is allowed to assume the role; Permissions Policies, which specify what actions the role can perform; and  Permissions Boundaries, which set the maximum permissions that the role can grant.  </p> <ul> <li>Use Cases: </li> <li>Access Within AWS: Allow applications (e.g., EC2 instances) to securely access other AWS resources (e.g., S3 buckets).  </li> <li>Access Outside AWS: Enable external applications to access AWS resources using IAM Roles Anywhere.  </li> <li>Cross-Account Access: Share resources and permissions between different AWS accounts.  </li> <li>Grant Service Access: Let AWS services (e.g., Lambda) perform actions on your behalf.</li> </ul> <p>Key Components of IAM Roles:</p> <ul> <li>Trust Policies: Define who is allowed to assume the role.  </li> <li>Permissions Policies: Specify what actions the role can perform.  </li> <li>Permissions Boundaries: Set the maximum permissions the role can grant.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#common-scenarios","title":"COMMON SCENARIOS","text":"<p>The image above  represents a simplified structure of AWS IAM Identity Center and its role.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#other-scenarios","title":"OTHER SCENARIOS:","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#access-workloads-within-aws","title":"Access Workloads Within AWS:","text":"<ul> <li>Scenario: An application running on an EC2 instance needs to interact with other AWS services.  </li> <li>How It Works: Create an IAM role with the necessary permissions and assign it to the application. The application uses temporary security credentials provided by the role.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#access-workloads-outside-of-aws","title":"Access Workloads Outside of AWS:","text":"<ul> <li>Scenario: Applications running on-premises or in other clouds need to access AWS resources.  </li> <li>How It Works: Use IAM Roles Anywhere to allow these external applications to obtain temporary access to AWS services, similar to applications within AWS.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#enable-cross-account-access","title":"Enable Cross-Account Access:","text":"<ul> <li>Scenario: You have multiple AWS accounts (e.g., development and production) and need to share resources between them.  </li> <li>How It Works: Set up IAM roles to grant permissions across AWS accounts, allowing resources in one account to access resources in another.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#grant-access-to-aws-services","title":"Grant Access to AWS Services:","text":"<ul> <li>Scenario: AWS services (e.g., Lambda) need to perform actions on your behalf (e.g., read from S3, write to DynamoDB).  </li> <li>How It Works: Define a role with specific permissions for the service. The service assumes this role to carry out its tasks.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/10%20-%20IAM%20Roles/#federated-identities-in-aws","title":"Federated Identities in AWS","text":"<p>What It Is:</p> <ul> <li>Allows users from external systems (e.g., corporate directories, social logins) to access AWS resources without separate AWS accounts.</li> </ul> <p>How It Works:</p> <ol> <li>User Logs In: Signs in through an existing identity provider (e.g., Microsoft Active Directory, Google).  </li> <li>Token Exchange: The identity provider sends a token to AWS to verify the user\u2019s identity.  </li> <li>Role Assumption: AWS uses the token to grant access by allowing the user to assume an IAM role with specific permissions.  </li> <li>Temporary Access: AWS provides temporary credentials based on the role, allowing access to resources.</li> </ol> <p>Next &gt;&gt; Using IAM Roles</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/","title":"IAM Roles Demonstration","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#introduction","title":"Introduction","text":"<p>IAM Roles are a powerful feature in AWS that allows you to grant temporary access to your AWS resources without needing to share long-term credentials. In this demonstration, we will walk through the process of creating an IAM role, configuring the AWS CLI to use that role, and performing actions using the role's permissions.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#step-1-create-an-iam-role","title":"STEP 1: Create an IAM Role","text":"<ol> <li>Navigate to IAM Dashboard:</li> <li>Log in to the AWS Management Console.</li> <li>Go to the IAM service.</li> </ol> <ol> <li>Create a New Role:</li> <li>In the IAM Dashboard, click on Roles in the left-hand menu.</li> </ol> <p>    - Click Create role.</p> <p></p> <ol> <li>Select Trusted Entity:</li> <li>Choose AWS service as the trusted entity.</li> </ol> <p>    - Select the service that will use the role, such as EC2.</p> <p></p> <ol> <li>Attach Permissions:</li> <li>Attach the <code>AmazonS3ReadOnlyAccess</code> policy to the role to grant read-only access to S3.</li> </ol> <p></p> <ol> <li>Name and Create the Role:</li> <li>Give the role a descriptive name, such as <code>EC2_S3ReadOnlyAccess</code>.</li> </ol> <p>    - Review the settings and click Create role.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#step-2-create-an-ec2-instance","title":"STEP 2: Create an EC2 Instance","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#navigate-to-ec2","title":"Navigate to EC2","text":"<ol> <li>In the AWS Management Console, search for \"EC2\" in the search bar at the top.</li> <li>Click on \u201cEC2\u201d from the search results to open the EC2 Dashboard.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#launch-instance","title":"Launch Instance","text":"<ol> <li>In the EC2 Dashboard, click on the \u201cLaunch Instance\u201d button to start the instance creation process.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#choose-an-amazon-machine-image-ami","title":"Choose an Amazon Machine Image (AMI)","text":"<ol> <li>Provide a name for your EC2 Instance</li> <li>You\u2019ll be presented with a list of AMIs. Select an AMI that suits your needs. For this workshop, you can choose an Amazon Linux AMI.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#create-a-key-pair","title":"Create a Key Pair","text":"<ol> <li>When prompted, create a new one. This key pair will be used to securely connect to your instance.</li> </ol> <p> 2. Provide a key pair name, select RSA Key Pair Type and click Create Key Pair.</p> <p> 2. Download the key pair file if you create a new one and store it in a safe location.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#launch-instance_1","title":"Launch Instance","text":"<p>Leave everthing else as it is and click the Launch Instance.</p> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#attach-the-role-to-your-ec2-instance","title":"Attach the role to your EC2 Instance","text":"<ol> <li>Go back to the EC2 Dashboard.</li> <li>In the left sidebar, click on \u201cInstances\u201d.</li> </ol> <p> 3. Select the instance to which you want to attach the role.</p> <p></p> <ol> <li>In default, our newly created EC2 Instance has no IAM Role yet.</li> </ol> <p> 5. Click on the \u201cActions\u201d dropdown menu, then select \u201cSecurity\u201d &gt; \u201cModify IAM Role\u201d.</p> <p></p> <ol> <li>In the \u201cModify IAM Role\u201d dialog:</li> <li>Select the IAM role you want to attach from the dropdown list. In this case, select the IAM role we created earlier and click <code>Update IAM Role</code></li> </ol> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#connecting-to-ec2-instance","title":"Connecting to EC2 Instance","text":"<ol> <li>With your instance selected, click on the <code>Connect</code> button at the top of the page.</li> </ol> <ol> <li>In the \"Connect to Instance\" Dialog, select the \u201cEC2 Instance Connect\u201d tab.</li> <li>Ensure the Connection Type selected is the \"Connect using EC2 Instance Connect\".</li> <li>Click the \"Connect\" button.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#access-your-instance","title":"Access Your Instance","text":"<ol> <li>A new terminal window will open with an SSH session to your instance.</li> <li>You are now connected to your instance and can start working on it.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#step-3-demonstrate-role-usage","title":"STEP 3: Demonstrate Role Usage","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#list-s3-buckets","title":"List S3 Buckets:","text":"<ul> <li> <p>Use the command below to list all S3 buckets accessible with the role:</p> <pre><code>aws s3 ls\n</code></pre> </li> </ul> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#accessing-s3-with-the-role","title":"Accessing S3 with the Role:","text":"<ul> <li>Go to S3 Dashboard and click the bucket we created to view the files. Let's try to download <code>alcnumber1.txt</code> or depends on the filename you uploaded.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#upload-files-to-the-s3-bucket","title":"Upload Files to the S3 Bucket","text":"<ul> <li>Lets create a file first    <pre><code>touch test.txt\n</code></pre></li> <li>In the EC2 instance, let's try to upload a file to the S3 Bucket we created earlier.    <pre><code>aws s3 cp test.txt s3://alc-demo/\n</code></pre> </li> </ul> <p>The permissions of the role we created is <code>ReadOnly</code>. ReadOnly permissions are designed to restrict actions to viewing and reading data only, which is why uploading files is not allowed under this permission set. </p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#download-files-from-s3-bucket","title":"Download Files from S3 Bucket","text":"<ul> <li> <p>Let's download the file <code>alcnumber1.txt</code> <pre><code>aws s3 cp s3://alc-demo/alcnumber1.txt ./\n</code></pre> </p> </li> <li> <p>We now have the <code>alcnumber1.txt</code> file inside our EC2 Instance.</p> </li> </ul> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/11%20-%20Using%20IAM%20Roles/#step-4-terminating-ec2-instance","title":"STEP 4: Terminating EC2 Instance","text":"<ol> <li>Select the EC2 instance</li> </ol> <ol> <li>Click on the Instance State dropdown button at the top of the page.</li> <li>Select \"Terminate Instance\" from the dropdown menu.</li> </ol> <p>Next &gt;&gt; IAM Policies</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/","title":"Identity Policies in AWS","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#what-are-aws-iam-permissions-and-policies","title":"What are AWS IAM Permissions and Policies?","text":"<p>Permissions in AWS IAM define what actions an identity (user, group, or role) can perform on AWS resources. These permissions are granted through policies, which are attached to identities. Policies are objects that define permissions and can be attached to identities.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#why-are-permissions-important","title":"Why Are Permissions Important?","text":"<ul> <li>Ensure Specific Access Levels: Users, groups, and roles can have complex and specific levels of access to AWS resources.</li> <li>Maintain Security and Compliance: Prevent unauthorized actions and manage security and compliance effectively.</li> </ul>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#types-of-iam-policies","title":"Types of IAM Policies","text":"<ol> <li> <p>Managed Policies: Pre-built policies created and maintained by AWS or your organization. These can be attached to users, groups, or roles.</p> </li> <li> <p>Inline Policies: Custom policies directly attached to a specific identity (user, group, or role).</p> </li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#adding-simple-identity-permissions-in-aws-iam","title":"Adding Simple Identity Permissions in AWS IAM","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#permissions-for-iam-users","title":"Permissions for IAM Users","text":"<ol> <li> <p>Navigate to IAM Users</p> </li> <li> <p>Open the AWS Management Console.</p> </li> <li>Go to IAM or search for IAM in the search bar.</li> <li> <p>Select Users, User Groups, or Roles from the sidebar.</p> <p></p> </li> <li> <p>Select the Identity</p> </li> <li> <p>Click on the user/user group/role to which you want to add permissions.</p> <p></p> </li> <li> <p>Attach Policies</p> </li> <li> <p>Go to the Permissions tab and click Add permissions.</p> <p></p> <p></p> </li> <li> <p>Choose Attach policies directly to assign managed or inline policies.</p> <p></p> </li> <li> <p>Find the appropriate policy using the search bar and select it.</p> <p></p> </li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#common-aws-managed-policies","title":"Common AWS Managed Policies","text":"<ol> <li> <p>AdministratorAccess</p> </li> <li> <p>Full Access to All Services: Perform any action on any AWS service.</p> </li> <li>Full Control Over All Resources: Create, modify, delete, and configure any AWS resource.</li> <li> <p>No Restrictions: No limitations or conditions imposed.</p> <p></p> </li> <li> <p>ReadOnlyAccess</p> </li> <li> <p>Read-Only Access: Provides read-only access to all AWS services.</p> </li> <li> <p>Use Case: Ideal for users who need to view resources across all AWS services.</p> <p></p> </li> </ol> <p>   (The policy search bar works by finding all results with that text, so other more specific policies may pop up first). </p> <ol> <li> <p>IAMFullAccess</p> <p></p> </li> <li> <p>Purpose: Grants full access to IAM.</p> </li> <li>Permissions: Manage IAM users, groups, roles, and policies.</li> <li> <p>Use Case: Best for administrators managing IAM aspects.</p> </li> <li> <p>IAMUserChangePassword</p> <p></p> </li> <li> <p>Purpose: Allows users to change their own IAM password.</p> </li> <li>Permissions: Allows actions like <code>iam:ChangePassword</code>.</li> <li>Use Case: Attach to users who need to manage their own password.</li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#custom-inline-policies","title":"Custom Inline Policies","text":"<p>If you need fine-grained control and a high degree of specificity, create inline policies. Useful for roles with unique requirements not covered by managed policies.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/12%20-%20Simple%20Identity%20Policies%20in%20AWS/#steps-to-create-a-custom-inline-policy","title":"Steps to Create a Custom Inline Policy","text":"<ol> <li> <p>Navigate to the Permissions Tab</p> </li> <li> <p>For the user, group, or role, go to the Permissions tab.</p> </li> <li> <p>Click Add inline policy.</p> </li> <li> <p>Use the Policy Editor</p> </li> <li> <p>Visual Editor: Define permissions by selecting actions, resources, and conditions through a guided interface.</p> </li> <li> <p>JSON Editor: Write the policy directly for more flexibility.</p> <p>Full Administrator Permissions JSON:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> <p>IAMFullAccess JSON:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:*\",\n        \"organizations:DescribeAccount\",\n        \"organizations:DescribeOrganization\",\n        \"organizations:DescribeOrganizationalUnit\",\n        \"organizations:DescribePolicy\",\n        \"organizations:ListChildren\",\n        \"organizations:ListParents\",\n        \"organizations:ListPoliciesForTarget\",\n        \"organizations:ListRoots\",\n        \"organizations:ListPolicies\",\n        \"organizations:ListTargetsForPolicy\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> </li> <li> <p>Review and Name Your Policy</p> </li> <li> <p>Click Review policy.</p> </li> <li>Give your policy a meaningful name.</li> <li>Click Create policy to apply it.</li> </ol> <p>Next &gt;&gt; IAM Policy Simulator</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/","title":"Using the AWS IAM Policy Simulator: Test Your IAM Policies Before Applying","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/#what-is-the-aws-iam-policy-simulator","title":"What is the AWS IAM Policy Simulator?","text":"<p>The AWS IAM Policy Simulator is a powerful tool that lets you test the effects of policies on your IAM entities (like users, groups, and roles) before you actually apply them. By using this simulator, you can evaluate how your policies will behave and ensure they are granting or denying permissions as expected.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/#how-to-access-the-iam-policy-simulator","title":"How to Access the IAM Policy Simulator","text":"<p>To get started, follow these steps:</p> <ol> <li> <p>Login to AWS Management Console:     Navigate to the AWS Management Console and sign in to your account.</p> </li> <li> <p>Search for IAM:     In the search bar, type \"IAM\" and select it from the dropdown list.</p> </li> <li> <p>Navigate to Policy Simulator:    Once in the IAM dashboard, look for \"Policy Simulator\" under the \"Tools\" section on the right-hand menu.</p> </li> </ol> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/#step-by-step-guide-to-using-the-iam-policy-simulator","title":"Step-by-Step Guide to Using the IAM Policy Simulator","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/#step-1-select-a-policy-to-simulate","title":"Step 1: Select a Policy to Simulate","text":"<p>In the IAM Policy Simulator, you have the option to select policies attached to users, groups, or roles, or you can paste a policy directly into the simulator. Here\u2019s how you can do it:</p> <ol> <li>Choose the Entity:     Select whether you want to simulate a policy for a user, group, role, or directly enter a policy.</li> </ol> <p></p> <ol> <li>Select the Policy:     If you chose a user, group, or role, you\u2019ll see a list of associated policies. Check the box next to the policy you want to simulate. In this case, we want to test the permissions set to user <code>0xshr00msz</code> using Amazon S3, selecting all of its actions and simulate.</li> </ol> <p></p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/13%20-%20IAM%20Policy%20Simulator/#step-2-choose-actions-to-simulate","title":"Step 2: Choose Actions to Simulate","text":"<p>Next, you'll need to simulate actions to test various permissions.</p> <ol> <li>Simulate Actions:    After clicking the <code>Run Simulation</code>, you can see the allowed and denied permissions based on the actions you selected. </li> </ol> <p></p> <ol> <li>Review Results:    Since user <code>0xshr00msz</code> has AdministratorAccess, all permissions are expected to be allowed as seen from the image below</li> </ol> <p></p> <p>Next &gt;&gt; Allowing Access to Billing Console</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/14%20-%20Allowing%20Access%20to%20Billing%20Console/","title":"Allow Access to Billing Console for an IAM user","text":"<p>By default, IAM users do not have access to the AWS Billing Console. To enable such access, the root user must first make a specific configuration change. This restriction is in place to enhance security and ensure that only trusted accounts can manage billing and account-related settings. Therefore, the root user must manually grant access by modifying the relevant IAM policies or settings.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/14%20-%20Allowing%20Access%20to%20Billing%20Console/#allow-access-to-the-billing-console","title":"Allow Access to the Billing Console","text":"<ol> <li>Sign in to the AWS Management Console using your root account.</li> <li> <p>In the navigation bar, click on your account name, and then choose Account.</p> <p> 3. Scroll down and look for IAM user and Role Access to Billing Information and then click on Edit.</p> <p> 4. Click on the Activate IAM Access checkbox to allow access. Afterwards, click on Update.</p> <p></p> </li> </ol>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/14%20-%20Allowing%20Access%20to%20Billing%20Console/#create-an-iam-entity-with-billing-permissions","title":"Create an IAM Entity with Billing Permissions","text":"<ol> <li> <p>Go to the AWS Management Console and look for IAM on the Services Tab.</p> <p> 2. Navigate to Users on the sidebar and click on Create User.</p> <p> 3. Specify user details, such as the name and password.</p> <p> 4. Set permissions for the user. Choose Attach policies directly and then look for Billing in the permission policies.</p> <p> 5. Review your choices, and once you\u2019re done click on Create User.</p> </li> </ol> <p>Next &gt;&gt; Creating a Budget and Setting Up Budget Alarms</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/15%20-%20Creating%20a%20Budget%20and%20Setting%20up%20Budget%20Alarms/","title":"Creating a Budget and Setting Up Budget Alarms","text":""},{"location":"Workshops/Security/First%20Line%20of%20Defense/15%20-%20Creating%20a%20Budget%20and%20Setting%20up%20Budget%20Alarms/#introduction-to-aws-budgets","title":"Introduction to AWS Budgets","text":"<p>AWS Budgets allows you to set custom spending limits on your AWS costs and usage. You can receive alerts when you exceed your budget or approach the limit, helping you keep track of your expenditures. By setting up AWS Budgets, you can gain better control over your AWS spending and avoid unexpected charges.</p> <p>You can set up a budget in two ways: using a budget template, or customizing your own. To better understand budgets, let's set up your own customized budget.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/15%20-%20Creating%20a%20Budget%20and%20Setting%20up%20Budget%20Alarms/#creating-a-budget","title":"Creating a Budget","text":"<p>Step 1: In your AWS Console, click services and look for Billing and Cost Management, alternatively you can also use the search bar to access it.</p> <p>Step 2: Navigate to Budgets in the sidebar.</p> <p>Step 3: Click on \"Create budget\".</p> <p></p> <p>Step 4: Choose if you want to use a template or customize. In this case, let's create a customized cost budget for Amazon S3.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/15%20-%20Creating%20a%20Budget%20and%20Setting%20up%20Budget%20Alarms/#customized","title":"Customized:","text":"<ol> <li> <p>Choose Budget Type: You\u2019ll be prompted to choose the type of budget you want to create. The main options are:</p> <ul> <li>Cost Budget: For tracking spending by cost.</li> <li>Usage Budget: For tracking usage of specific AWS services.</li> <li>Reservation Budget: For tracking costs related to reserved instances.</li> <li>Savings Plan Budget: For tracking savings plan utilization and ensuring you're meeting your committed usage levels.</li> </ul> <p></p> </li> <li> <p>Configure Your Budget:</p> <ul> <li>Name: Enter a name that will help you identify the budget later.</li> <li>Set the budget amount: Enter the maximum amount you are willing to spend. You can choose to set this amount for a specific time period (e.g., monthly, quarterly, yearly).</li> </ul> <p></p> <ul> <li>Specify the budget scope: Choose whether the budget should apply to your entire account or specific services, cost categories, or tags.</li> </ul> <p></p> <p>For this demo, configure your budget to be recurring, fixed, and monthly, with a budget amount of $10.00. Specify your budget scope to Filter Specific AWS Cost Dimensions, choose Service for the Dimension and look for S3 (Simple Storage Service) for the Values. 3. Set Alerts and Notifications:</p> <p>You can set up notifications to alert you via email when your spending reaches certain thresholds (e.g., 50%, 80%, 100% of the budget).</p> <ul> <li>On the 3rd step of setting up your customize budget, click \u201cAdd an alert threshold\u201d</li> <li>Here, you can set when the alarm is triggered, such as a numerical absolute or percentage value, and whether it should trigger when it reaches the forecasted cost or actual cost.</li> <li> <p>Then, you can move on to the notification preferences. The budget alerts can notify you via email, SNS, or chatbot alerts.</p> <p>Email: For Email alerts, you can input the emails you would like to receive alerts to, separated by commas: person@gmail.com, aws@aws.com, etc.</p> <p>Amazon Simple Notification Service Alerts (SNS): You also have an option to send notifications with SNS. This is where your Amazon SNS sends an alert to a Topic, which in turn sends it to its subscribers, Applications or Persons.</p> <p>Chatbot: For Chatbot Alerts, it can send a notification to the specified chat rooms.</p> </li> </ul> <p>In this case, we set the threshold to 70% of the budgeted amount, to trigger when it reaches greater than the threshold.</p> <p></p> </li> <li> <p>Review and Confirm:</p> <ul> <li>Review your budget settings to ensure they meet your needs.</li> <li>Click \"Create budget\" to finalize and save your new budget.</li> </ul> </li> </ol> <p>Since we\u2019ve set up a customized budget already, you\u2019ve already likely understood the essentials for creating a budget. However, there might be cases wherein you don\u2019t actually need a fully customized budget for your services or account. In this case, you would greatly benefit from using AWS Budgets Templates. Let\u2019s now set up a budget using a template.</p>"},{"location":"Workshops/Security/First%20Line%20of%20Defense/15%20-%20Creating%20a%20Budget%20and%20Setting%20up%20Budget%20Alarms/#template","title":"Template:","text":"<ol> <li> <p>You have four (4) options if you want to use a template:</p> <ul> <li>Zero spend budget: A budget that notifies you after your spending exceeds AWS Free Tier limits ($0.01)</li> <li>Monthly cost budget: A monthly budget that notifies you if you exceed, or are forecasted to exceed, the budget amount.</li> <li>Daily Savings Plans coverage budget: A coverage budget for your Savings Plans that notifies you when you fall below the defined target. (For savings plan)</li> <li>Daily reservation utilization budget: A utilization budget for your Reserved Instances that notifies you when you fall below the defined target. (For reserved instances plan)</li> </ul> <p>In this case, let's choose the zero-spend budget.</p> </li> <li> <p>After choosing, you have to specify the email recipients you want to notify when the threshold has exceeded (The maximum number is 10). You can also choose to have a customized name for your budget, albeit optional.</p> <p></p> </li> <li> <p>Review and Confirm:</p> <ul> <li>Review your budget settings to ensure they meet your needs.</li> <li>Click \"Create budget\" to finalize and save your new budget.</li> <li>Do note that you can configure this budget after creating it, so in the case wherein you only need to change one setting, you can create a budget with a template without tediously configuring everything.</li> </ul> </li> </ol> <p>After creating your budget, you can monitor it from the AWS Budgets dashboard. This section will show you how much you\u2019ve spent and how it compares to your budgeted amount. You can also create budget reports to monitor the performance of your existing budgets on a daily, weekly, or monthly frequency and deliver that report to up to 50 email addresses.</p>"}]}